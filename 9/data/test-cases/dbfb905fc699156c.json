{"uid":"dbfb905fc699156c","name":"test_clean_customer_id_edge_cases","fullName":"test_customers#test_clean_customer_id_edge_cases","historyId":"d9dab7ace3b60161170ad057dbd38249","time":{"start":1741713413005,"stop":1741713413183,"duration":178},"description":"Test edge cases for customer ID cleaning.","descriptionHtml":"<p>Test edge cases for customer ID cleaning.</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[CUSTOMER_ID: int, customer_name: string, city: string].count","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f1ac03a0df0>\n\n    def test_clean_customer_id_edge_cases(spark_session):\n        \"\"\"Test edge cases for customer ID cleaning.\"\"\"\n        data = [\n            (0.0, \"Zero\", \"City\"),  # Zero ID - should be filtered\n            (1e10, \"Large\", \"City\"),  # Very large ID - should work if whole number\n            (1.1, \"Float\", \"City\"),  # Decimal - should be filtered\n            (float(\"inf\"), \"Infinity\", \"City\"),  # Infinity - should be filtered\n        ]\n        schema = StructType(\n            [\n                StructField(\"CUSTOMER_ID\", FloatType(), True),\n                StructField(\"customer_name\", StringType(), True),\n                StructField(\"city\", StringType(), True),\n            ]\n        )\n        test_df = spark_session.createDataFrame(data, schema)\n        result_df = clean_customer_id(test_df)\n    \n        # Only 1e10 should pass our filters (large whole number)\n>       assert result_df.count() == 1\nE       assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[CUSTOMER_ID: int, customer_name: string, city: string].count\n\ntest_customers.py:309: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741713400812,"stop":1741713403565,"duration":2753},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1741713413888,"stop":1741713414874,"duration":986},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_customers"},{"name":"host","value":"fv-az1768-471"},{"name":"thread","value":"2966-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_customers"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"dbfb905fc699156c.json","parameterValues":[]}