{"uid":"f0444cb5a933a19","name":"test_clean_customer_data_integration","fullName":"test_customers#test_clean_customer_data_integration","historyId":"46936288411a33721514995728d75aa0","time":{"start":1741712041549,"stop":1741712041981,"duration":432},"description":"Integration test for the entire data cleaning pipeline.","descriptionHtml":"<p>Integration test for the entire data cleaning pipeline.</p>\n","status":"failed","statusMessage":"AssertionError: assert 4 == 5\n +  where 4 = count()\n +    where count = DataFrame[customer_id: int, customer_name: string, city: string].count","statusTrace":"sample_customers_df = DataFrame[CUSTOMER_ID: float, customer_name: string, city: string]\nexpected_schema = StructType([StructField('customer_id', IntegerType(), True), StructField('customer_name', StringType(), True), StructField('city', StringType(), True)])\n\n    def test_clean_customer_data_integration(sample_customers_df, expected_schema):\n        \"\"\"Integration test for the entire data cleaning pipeline.\"\"\"\n        result_df = clean_customer_data(sample_customers_df)\n        for field in expected_schema:\n            assert field.name in result_df.columns\n        assert result_df.schema[\"customer_id\"].dataType == IntegerType()\n        cleaned_data = result_df.collect()\n>       assert result_df.count() == 5\nE       assert 4 == 5\nE        +  where 4 = count()\nE        +    where count = DataFrame[customer_id: int, customer_name: string, city: string].count\n\ntest_customers.py:263: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741712028268,"stop":1741712033623,"duration":5355},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"sample_customers_df","time":{"start":1741712041531,"stop":1741712041548,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"expected_schema","time":{"start":1741712041548,"stop":1741712041549,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1741712045207,"stop":1741712046201,"duration":994},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_customers"},{"name":"host","value":"fv-az1361-963"},{"name":"thread","value":"3034-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_customers"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f0444cb5a933a19.json","parameterValues":[]}