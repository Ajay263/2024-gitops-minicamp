{"uid":"3a4d7349bcf9eb6b","name":"test_clean_string_columns_formatting","fullName":"test_customers#test_clean_string_columns_formatting","historyId":"21f861b5b2043e0fb72c5a530c201cc9","time":{"start":1741712040476,"stop":1741712040630,"duration":154},"description":"Test that string columns are properly formatted with proper capitalization.","descriptionHtml":"<p>Test that string columns are properly formatted with proper capitalization.</p>\n","status":"failed","statusMessage":"AssertionError: assert 'Mary Williams ' == 'Mary Williams'\n  \n  - Mary Williams\n  + Mary Williams \n  ?              +","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f9f29d5ed90>\n\n    def test_clean_string_columns_formatting(spark_session):\n        \"\"\"Test that string columns are properly formatted with proper capitalization.\"\"\"\n        data = [\n            (1.0, \"john doe\", \"new york\"),\n            (2.0, \"JANE SMITH\", \"CHICAGO\"),\n            (3.0, \"bob@johnson\", \"los-angeles\"),\n            (4.0, \"mary williams!!!\", \"boston$$$\"),\n        ]\n        schema = StructType(\n            [\n                StructField(\"CUSTOMER_ID\", FloatType(), True),\n                StructField(\"customer_name\", StringType(), True),\n                StructField(\"city\", StringType(), True),\n            ]\n        )\n        test_df = spark_session.createDataFrame(data, schema)\n        columns_to_clean = [\"customer_name\", \"city\"]\n        result_df = clean_string_columns(test_df, columns_to_clean)\n        cleaned_data = result_df.collect()\n        assert cleaned_data[0][1] == \"John Doe\"\n        assert cleaned_data[0][2] == \"New York\"\n        assert cleaned_data[2][1] == \"Bob Johnson\"  # @ replaced with space\n        assert cleaned_data[2][2] == \"Los Angeles\"  # - replaced with space\n>       assert cleaned_data[3][1] == \"Mary Williams\"  # !!! removed\nE       AssertionError: assert 'Mary Williams ' == 'Mary Williams'\nE         \nE         - Mary Williams\nE         + Mary Williams \nE         ?              +\n\ntest_customers.py:232: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741712028268,"stop":1741712033623,"duration":5355},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1741712045207,"stop":1741712046201,"duration":994},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_customers"},{"name":"host","value":"fv-az1361-963"},{"name":"thread","value":"3034-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_customers"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"3a4d7349bcf9eb6b.json","parameterValues":[]}