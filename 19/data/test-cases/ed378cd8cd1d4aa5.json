{"uid":"ed378cd8cd1d4aa5","name":"test_clean_agreed_delivery_date","fullName":"test_order_lines#test_clean_agreed_delivery_date","historyId":"0a4f09f34bb63d378c8ed363d0adeb11","time":{"start":1744632568036,"stop":1744632568315,"duration":279},"description":"Test that AGREED_DELIVERY_DATE is properly cleaned and parsed.","descriptionHtml":"<p>Test that AGREED_DELIVERY_DATE is properly cleaned and parsed.</p>\n","status":"broken","statusMessage":"pyspark.errors.exceptions.captured.SparkUpgradeException: [INCONSISTENT_BEHAVIOR_CROSS_VERSION.DATETIME_PATTERN_RECOGNITION] You may get a different result due to the upgrading to Spark >= 3.0:\nFail to recognize 'EEEE, MMMM d, yyyy' pattern in the DateTimeFormatter. 1) You can set \"spark.sql.legacy.timeParserPolicy\" to \"LEGACY\" to restore the behavior before Spark 3.0. 2) You can form a valid datetime pattern with the guide from 'https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html'.","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f4f9385d2b0>\n\n    def test_clean_agreed_delivery_date(spark_session):\n        \"\"\"Test that AGREED_DELIVERY_DATE is properly cleaned and parsed.\"\"\"\n        data = [\n            (\"ORD-1\", \"01/15/2024\"),  # MM/dd/yyyy format\n            (\"ORD-2\", \"2024-02-15\"),  # yyyy-MM-dd format\n            (\"ORD-3\", \"03.15.2024\"),  # Special character\n            (\"ORD-4\", \"2023-04-15\"),  # Different year, should be replaced with 2024\n            (\"ORD-5\", \"invalid-date\"),  # Invalid date\n            (\"ORD-6\", None),  # Null value\n        ]\n        schema = StructType(\n            [\n                StructField(\"ORDER_ID\", StringType(), True),\n                StructField(\"AGREED_DELIVERY_DATE\", StringType(), True),\n            ]\n        )\n        test_df = spark_session.createDataFrame(data=data, schema=schema)\n        result_df = clean_agreed_delivery_date(test_df)\n>       rows = result_df.collect()\n\ntest_order_lines.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/pyspark/sql/dataframe.py:1263: in collect\n    sock_info = self._jdf.collectToPython()\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/py4j/java_gateway.py:1322: in __call__\n    return_value = get_return_value(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = ('xro1076', <py4j.clientserver.JavaClient object at 0x7f4f938b2dc0>, 'o1075', 'collectToPython')\nkw = {}, converted = SparkUpgradeException()\n\n    def deco(*a: Any, **kw: Any) -> Any:\n        try:\n            return f(*a, **kw)\n        except Py4JJavaError as e:\n            converted = convert_exception(e.java_exception)\n            if not isinstance(converted, UnknownException):\n                # Hide where the exception came from that shows a non-Pythonic\n                # JVM exception message.\n>               raise converted from None\nE               pyspark.errors.exceptions.captured.SparkUpgradeException: [INCONSISTENT_BEHAVIOR_CROSS_VERSION.DATETIME_PATTERN_RECOGNITION] You may get a different result due to the upgrading to Spark >= 3.0:\nE               Fail to recognize 'EEEE, MMMM d, yyyy' pattern in the DateTimeFormatter. 1) You can set \"spark.sql.legacy.timeParserPolicy\" to \"LEGACY\" to restore the behavior before Spark 3.0. 2) You can form a valid datetime pattern with the guide from 'https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html'.\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/pyspark/errors/exceptions/captured.py:185: SparkUpgradeException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1744632567468,"stop":1744632567472,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1744632579792,"stop":1744632579793,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_order_lines"},{"name":"host","value":"fv-az1720-230"},{"name":"thread","value":"3062-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_order_lines"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"ed378cd8cd1d4aa5.json","parameterValues":[]}