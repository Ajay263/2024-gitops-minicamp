{"uid":"a4d71861f0aeab7c","name":"test_clean_order_id_and_product_id","fullName":"test_order_lines#test_clean_order_id_and_product_id","historyId":"860ac6a9ad648c6be27209b4b6df2a79","time":{"start":1741768873545,"stop":1741768874731,"duration":1186},"description":"Test that ORDER_ID and PRODUCT_ID are properly cleaned.","descriptionHtml":"<p>Test that ORDER_ID and PRODUCT_ID are properly cleaned.</p>\n","status":"failed","statusMessage":"AssertionError: ORDER_ID 'ORD/789' should be cleaned to 'ORD789'\nassert 2 == 1\n +  where 2 = len([Row(ORDER_ID='ORD789', PRODUCT_ID=101, ORDER_QTY=0.0, AGREED_DELIVERY_DATE='03/01/2023', ACTUAL_DELIVERY_DATE='03/05/2023', DELIVERY_QTY='0'), Row(ORDER_ID='ORD789', PRODUCT_ID=808, ORDER_QTY=None, AGREED_DELIVERY_DATE='10/01/2024', ACTUAL_DELIVERY_DATE='10/05/2024', DELIVERY_QTY='75')])","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7fd261d99460>\nsample_order_lines_df = DataFrame[ORDER_ID: string, PRODUCT_ID: string, ORDER_QTY: float, AGREED_DELIVERY_DATE: string, ACTUAL_DELIVERY_DATE: string, DELIVERY_QTY: string]\n\n    def test_clean_order_id_and_product_id(spark_session, sample_order_lines_df):\n        \"\"\"Test that ORDER_ID and PRODUCT_ID are properly cleaned.\"\"\"\n        result_df = clean_order_id_and_product_id(sample_order_lines_df)\n    \n        ord_456_row = result_df.filter(result_df.ORDER_ID == \"ORD456\").collect()\n        assert len(ord_456_row) == 1, \"ORDER_ID 'ord 456' should be cleaned to 'ORD456'\"\n    \n        ord_789_row = result_df.filter(result_df.ORDER_ID == \"ORD789\").collect()\n>       assert len(ord_789_row) == 1, \"ORDER_ID 'ORD/789' should be cleaned to 'ORD789'\"\nE       AssertionError: ORDER_ID 'ORD/789' should be cleaned to 'ORD789'\nE       assert 2 == 1\nE        +  where 2 = len([Row(ORDER_ID='ORD789', PRODUCT_ID=101, ORDER_QTY=0.0, AGREED_DELIVERY_DATE='03/01/2023', ACTUAL_DELIVERY_DATE='03/05/2023', DELIVERY_QTY='0'), Row(ORDER_ID='ORD789', PRODUCT_ID=808, ORDER_QTY=None, AGREED_DELIVERY_DATE='10/01/2024', ACTUAL_DELIVERY_DATE='10/05/2024', DELIVERY_QTY='75')])\n\ntest_order_lines.py:132: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741768867834,"stop":1741768870418,"duration":2584},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"sample_order_lines_df","time":{"start":1741768873502,"stop":1741768873544,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test that ORDER_ID and PRODUCT_ID are properly cleaned.","status":"failed","statusMessage":"AssertionError: ORDER_ID 'ORD/789' should be cleaned to 'ORD789'\nassert 2 == 1\n +  where 2 = len([Row(ORDER_ID='ORD789', PRODUCT_ID=101, ORDER_QTY=0.0, AGREED_DELIVERY_DATE='03/01/2023', ACTUAL_DELIVERY_DATE='03/05/2023', DELIVERY_QTY='0'), Row(ORDER_ID='ORD789', PRODUCT_ID=808, ORDER_QTY=None, AGREED_DELIVERY_DATE='10/01/2024', ACTUAL_DELIVERY_DATE='10/05/2024', DELIVERY_QTY='75')])","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7fd261d99460>\nsample_order_lines_df = DataFrame[ORDER_ID: string, PRODUCT_ID: string, ORDER_QTY: float, AGREED_DELIVERY_DATE: string, ACTUAL_DELIVERY_DATE: string, DELIVERY_QTY: string]\n\n    def test_clean_order_id_and_product_id(spark_session, sample_order_lines_df):\n        \"\"\"Test that ORDER_ID and PRODUCT_ID are properly cleaned.\"\"\"\n        result_df = clean_order_id_and_product_id(sample_order_lines_df)\n    \n        ord_456_row = result_df.filter(result_df.ORDER_ID == \"ORD456\").collect()\n        assert len(ord_456_row) == 1, \"ORDER_ID 'ord 456' should be cleaned to 'ORD456'\"\n    \n        ord_789_row = result_df.filter(result_df.ORDER_ID == \"ORD789\").collect()\n>       assert len(ord_789_row) == 1, \"ORDER_ID 'ORD/789' should be cleaned to 'ORD789'\"\nE       AssertionError: ORDER_ID 'ORD/789' should be cleaned to 'ORD789'\nE       assert 2 == 1\nE        +  where 2 = len([Row(ORDER_ID='ORD789', PRODUCT_ID=101, ORDER_QTY=0.0, AGREED_DELIVERY_DATE='03/01/2023', ACTUAL_DELIVERY_DATE='03/05/2023', DELIVERY_QTY='0'), Row(ORDER_ID='ORD789', PRODUCT_ID=808, ORDER_QTY=None, AGREED_DELIVERY_DATE='10/01/2024', ACTUAL_DELIVERY_DATE='10/05/2024', DELIVERY_QTY='75')])\n\ntest_order_lines.py:132: AssertionError","steps":[],"attachments":[{"uid":"8a3efec53e56b32","name":"stderr","source":"8a3efec53e56b32.txt","type":"text/plain","size":246}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"spark_session::0","time":{"start":1741768879854,"stop":1741768880837,"duration":983},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_order_lines"},{"name":"host","value":"fv-az1690-65"},{"name":"thread","value":"3073-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_order_lines"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a4d71861f0aeab7c.json","parameterValues":[]}