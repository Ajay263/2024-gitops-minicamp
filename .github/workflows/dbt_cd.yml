name: DBT CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - development
      full_refresh:
        description: 'Run with full refresh'
        required: false
        default: false
        type: boolean

jobs:
  dbt_ci_cd_job:
    environment: ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    env:
      DBT_PROFILES_DIR: .
      REDSHIFT_HOST: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_HOST }}
      REDSHIFT_USER: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_USER }}
      REDSHIFT_PASSWORD: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_PASSWORD }}
      REDSHIFT_PORT: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_PORT }}
      REDSHIFT_DBNAME: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_DATABASE }}
      REDSHIFT_SCHEMA: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_SCHEMA }}
      S3_BUCKET_PATH: ${{ secrets.CODE_BUCKET }}
    permissions:
      id-token: write 
      contents: read 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r airflow/requirements_dbt_venv.txt
          pip install dbt-redshift awscli psycopg2-binary

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: us-east-1
          
      - name: Test Redshift Connection
        run: |
            # Get workgroup endpoint
            ENDPOINT=$(aws redshift-serverless get-workgroup --workgroup-name nexabrands-redshift-workgroup --query 'workgroup.endpoint.address' --output text)
            echo "Redshift endpoint: $ENDPOINT"
            
            # Test with a simple query
            aws redshift-data execute-statement \
              --workgroup-name nexabrands-redshift-workgroup \
              --database nexabrands_datawarehouse \
              --sql "SELECT current_date;"

      - name: Create profiles.yml
        run: |
          cat > profiles.yml <<EOF
          nexabrands_dbt:
            outputs:
              prod:
                type: redshift
                host: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_HOST }}
                user: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_USER }}
                password: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_PASSWORD }}
                port: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_PORT }}
                dbname: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_DATABASE }}
                schema: ${{ secrets.DBT_ENV_SECRET_REDSHIFT_SCHEMA }}
                threads: 4
                keepalives_idle: 0
                connect_timeout: 120
                retries: 3
            target: prod
          EOF
          
          # Debug - print the profiles.yml without credentials
          cat profiles.yml | sed 's/\(password: \).*/\1***/'
      
      - name: Download previous manifest
        run: |
          echo "Downloading manifest from s3://${{ secrets.CODE_BUCKET }}/dbt-docs/manifest.json"
          aws s3 cp s3://${{ secrets.CODE_BUCKET }}/dbt-docs/manifest.json ./manifest.json || echo "No previous manifest found"

      - name: List dbt project files
        run: |
          echo "Listing dbt project directory contents:"
          cd airflow/dbt/nexabrands_dbt
          ls -la
          echo "Checking for dbt_project.yml:"
          if [ -f "dbt_project.yml" ]; then
            echo "dbt_project.yml found"
            cat dbt_project.yml | grep -i "name\|profile"
          else
            echo "dbt_project.yml NOT found"
            find . -name "dbt_project.yml"
          fi

      - name: Run dbt debug
        working-directory: airflow/dbt/nexabrands_dbt
        run: |
          # Print dbt version
          dbt --version
          # Run debug with verbose output
          dbt debug --target prod

      - name: Run dbt deps
        working-directory: airflow/dbt/nexabrands_dbt
        run: dbt deps --target prod

      - name: Run dbt test (PR only)
        if: github.event_name == 'pull_request'
        working-directory: airflow/dbt/nexabrands_dbt
        run: |
          if [ -f "../../manifest.json" ]; then
            dbt test -s 'state:modified+' --state ../../ --target prod
          else
            dbt test --target prod
          fi

      - name: Run dbt build (main branch or manual dispatch)
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        working-directory: airflow/dbt/nexabrands_dbt
        run: |
          if [ "${{ github.event.inputs.full_refresh }}" == "true" ]; then
            echo "Running with full refresh"
            dbt build --full-refresh --target prod
          elif [ -f "../../manifest.json" ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "Running with state"
            dbt build -s 'state:modified+' --state ../../ --target prod
          else
            echo "Running normal build"
            dbt build --target prod
          fi

      - name: Copy new manifest to S3 (main branch or manual dispatch)
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: |
          aws s3 cp airflow/dbt/nexabrands_dbt/target/manifest.json s3://${{ secrets.CODE_BUCKET }}/dbt-docs/