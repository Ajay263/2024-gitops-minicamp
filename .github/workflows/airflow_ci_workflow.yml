name: Airflow DAG
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  trigger-airflow:
    runs-on: self-hosted  # Use self-hosted runner on your EC2 instance
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov allure-pytest pre-commit pytest-rerunfailures allure-commandline
      
      - name: Install and run pre-commit hooks
        run: |
          pre-commit install
          SKIP=sqlfluff-lint,sqlfluff-fix,yamllint,no-commit-to-branch pre-commit run --all-files --verbose
      
      - name: Check Docker containers
        run: |
          sudo docker ps -a  # List all containers with sudo
      
      - name: Test the Airflow dag
        id: run_tests
        continue-on-error: true
        run: |
          sudo docker exec airflow-airflow-webserver-1 bash -c "cd /opt/airflow && python -m pytest test/ -v -p no:warnings --cov=dags --cov-report=xml:test/coverage.xml --cov-report=html:test/coverage_html --alluredir=test/allure-results"
          sudo docker cp airflow-airflow-webserver-1:/opt/airflow/test/coverage.xml ./coverage.xml
          sudo docker cp airflow-airflow-webserver-1:/opt/airflow/test/coverage_html ./coverage_html
          sudo docker cp airflow-airflow-webserver-1:/opt/airflow/test/allure-results ./allure-results
      
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages
      
      - name: Upload Coverage Report (HTML)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage_html
          path: coverage_html
      
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: allure-results
      
      - name: Generate Allure Report
        if: always()
        run: |
          # Install Allure if not already installed
          if ! command -v allure &> /dev/null; then
            echo "Installing Allure command-line tool"
            # Already installed via pip above
          fi
          
          # Generate report from results
          allure generate allure-results -o allure-report --clean
          
          # Copy history if it exists
          if [ -d "gh-pages/history" ]; then
            mkdir -p allure-report/history
            cp -R gh-pages/history/* allure-report/history/ || true
          fi
      
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: allure-report
      
      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
          keep_files: false
      
      - name: Add Coverage Comment to PR
        if: github.event_name == 'pull_request' && always()
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: coverage.xml
          title: Airflow DAG Test Coverage Report
          create-new-comment: true
          report-only-changed-files: true
      
      - name: Check test status and set job output
        if: always()
        id: check_status
        run: |
          if [ "${{ steps.run_tests.outcome }}" == "failure" ]; then
            echo "tests_failed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_failed=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      tests_failed: ${{ steps.check_status.outputs.tests_failed }}
