{"uid":"d039d61fa6d33594","name":"test_clean_orders_data_order_id_cleaning","fullName":"test_orders#test_clean_orders_data_order_id_cleaning","historyId":"3c7a0097407924166279f36fdece27dd","time":{"start":1741772327968,"stop":1741772328409,"duration":441},"description":"Test that order_id is properly cleaned and standardized.","descriptionHtml":"<p>Test that order_id is properly cleaned and standardized.</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[order_id: string, customer_id: int, order_placement_date: date].count\n +      where DataFrame[order_id: string, customer_id: int, order_placement_date: date] = filter(Column<'order_id'> == 'ORD789')\n +        where filter = DataFrame[order_id: string, customer_id: int, order_placement_date: date].filter\n +        and   Column<'order_id'> = DataFrame[order_id: string, customer_id: int, order_placement_date: date].order_id","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f3fa1bf3be0>\n\n    def test_clean_orders_data_order_id_cleaning(spark_session):\n        \"\"\"Test that order_id is properly cleaned and standardized.\"\"\"\n        data = [\n            (\"ord123\", \"1001\", \"01/15/2024\"),\n            (\"ORD-456\", \"1002\", \"02/20/2024\"),\n            (\"  ORD789  \", \"1003\", \"03/25/2024\"),\n            (\"Unknown\", \"1004\", \"04/30/2024\"),\n        ]\n        schema = StructType(\n            [\n                StructField(\"ORDER_ID\", StringType(), True),\n                StructField(\"customer_id\", StringType(), True),\n                StructField(\"order_placement_date\", StringType(), True),\n            ]\n        )\n        test_df = spark_session.createDataFrame(data=data, schema=schema)\n    \n        result_df = clean_orders_data(test_df)\n    \n        # Check that IDs are standardized (uppercase, trimmed)\n        assert result_df.filter(result_df.order_id == \"ORD123\").count() == 1\n>       assert result_df.filter(result_df.order_id == \"ORD789\").count() == 1\nE       AssertionError: assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[order_id: string, customer_id: int, order_placement_date: date].count\nE        +      where DataFrame[order_id: string, customer_id: int, order_placement_date: date] = filter(Column<'order_id'> == 'ORD789')\nE        +        where filter = DataFrame[order_id: string, customer_id: int, order_placement_date: date].filter\nE        +        and   Column<'order_id'> = DataFrame[order_id: string, customer_id: int, order_placement_date: date].order_id\n\ntest_orders.py:177: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741772314316,"stop":1741772319102,"duration":4786},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1741772330672,"stop":1741772331670,"duration":998},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_orders"},{"name":"host","value":"fv-az1296-332"},{"name":"thread","value":"3017-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_orders"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"31c991c7012549d0","status":"failed","statusDetails":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[order_id: string, customer_id: int, order_placement_date: date].count\n +      where DataFrame[order_id: string, customer_id: int, order_placement_date: date] = filter(Column<'order_id'> == 'ORD789')\n +        where filter = DataFrame[order_id: string, customer_id: int, order_placement_date: date].filter\n +        and   Column<'order_id'> = DataFrame[order_id: string, customer_id: int, order_placement_date: date].order_id","time":{"start":1741772327483,"stop":1741772327956,"duration":473}},{"uid":"19684afca7cea5e0","status":"failed","statusDetails":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[order_id: string, customer_id: int, order_placement_date: date].count\n +      where DataFrame[order_id: string, customer_id: int, order_placement_date: date] = filter(Column<'order_id'> == 'ORD789')\n +        where filter = DataFrame[order_id: string, customer_id: int, order_placement_date: date].filter\n +        and   Column<'order_id'> = DataFrame[order_id: string, customer_id: int, order_placement_date: date].order_id","time":{"start":1741772326994,"stop":1741772327472,"duration":478}},{"uid":"267232842d22a7aa","status":"failed","statusDetails":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[order_id: string, customer_id: int, order_placement_date: date].count\n +      where DataFrame[order_id: string, customer_id: int, order_placement_date: date] = filter(Column<'order_id'> == 'ORD789')\n +        where filter = DataFrame[order_id: string, customer_id: int, order_placement_date: date].filter\n +        and   Column<'order_id'> = DataFrame[order_id: string, customer_id: int, order_placement_date: date].order_id","time":{"start":1741772326392,"stop":1741772326977,"duration":585}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d039d61fa6d33594.json","parameterValues":[]}