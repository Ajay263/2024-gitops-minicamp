{"uid":"9830be84ad124a33","name":"test_clean_orders_data_integration","fullName":"test_orders#test_clean_orders_data_integration","historyId":"f6add01908c1e7fb3198ea290ba20a78","time":{"start":1741772322328,"stop":1741772324144,"duration":1816},"description":"Integration test for the entire data cleaning pipeline.","descriptionHtml":"<p>Integration test for the entire data cleaning pipeline.</p>\n","status":"failed","statusMessage":"AssertionError: assert 4 == 3\n +  where 4 = count()\n +    where count = DataFrame[order_id: string, customer_id: int, order_placement_date: date].count","statusTrace":"sample_orders_df = DataFrame[ORDER_ID: string, customer_id: string, order_placement_date: string]\nexpected_schema = StructType([StructField('order_id', StringType(), True), StructField('customer_id', IntegerType(), True), StructField('order_placement_date', DateType(), True)])\n\n    def test_clean_orders_data_integration(sample_orders_df, expected_schema):\n        \"\"\"Integration test for the entire data cleaning pipeline.\"\"\"\n        result_df = clean_orders_data(sample_orders_df)\n    \n        # Check schema\n        for field in expected_schema:\n            assert field.name in result_df.columns\n        assert result_df.schema[\"order_id\"].dataType == StringType()\n        assert result_df.schema[\"customer_id\"].dataType == IntegerType()\n        assert result_df.schema[\"order_placement_date\"].dataType == DateType()\n    \n        # Check data filtering and cleaning\n>       assert result_df.count() == 3  # Only 3 valid records after cleaning\nE       assert 4 == 3\nE        +  where 4 = count()\nE        +    where count = DataFrame[order_id: string, customer_id: int, order_placement_date: date].count\n\ntest_orders.py:117: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741772314316,"stop":1741772319102,"duration":4786},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"sample_orders_df","time":{"start":1741772322289,"stop":1741772322327,"duration":38},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"expected_schema","time":{"start":1741772322327,"stop":1741772322328,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Integration test for the entire data cleaning pipeline.","status":"failed","statusMessage":"AssertionError: assert 4 == 3\n +  where 4 = count()\n +    where count = DataFrame[order_id: string, customer_id: int, order_placement_date: date].count","statusTrace":"sample_orders_df = DataFrame[ORDER_ID: string, customer_id: string, order_placement_date: string]\nexpected_schema = StructType([StructField('order_id', StringType(), True), StructField('customer_id', IntegerType(), True), StructField('order_placement_date', DateType(), True)])\n\n    def test_clean_orders_data_integration(sample_orders_df, expected_schema):\n        \"\"\"Integration test for the entire data cleaning pipeline.\"\"\"\n        result_df = clean_orders_data(sample_orders_df)\n    \n        # Check schema\n        for field in expected_schema:\n            assert field.name in result_df.columns\n        assert result_df.schema[\"order_id\"].dataType == StringType()\n        assert result_df.schema[\"customer_id\"].dataType == IntegerType()\n        assert result_df.schema[\"order_placement_date\"].dataType == DateType()\n    \n        # Check data filtering and cleaning\n>       assert result_df.count() == 3  # Only 3 valid records after cleaning\nE       assert 4 == 3\nE        +  where 4 = count()\nE        +    where count = DataFrame[order_id: string, customer_id: int, order_placement_date: date].count\n\ntest_orders.py:117: AssertionError","steps":[],"attachments":[{"uid":"844744989288c99f","name":"stderr","source":"844744989288c99f.txt","type":"text/plain","size":164}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"spark_session::0","time":{"start":1741772330672,"stop":1741772331670,"duration":998},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_orders"},{"name":"host","value":"fv-az1296-332"},{"name":"thread","value":"3017-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_orders"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"9830be84ad124a33.json","parameterValues":[]}