{"uid":"b6c15488b1107bd9","name":"test_clean_products_data_whitespace_trimming","fullName":"test_products#test_clean_products_data_whitespace_trimming","historyId":"a1623a97748cfa25a15ee65bfcb50ba5","time":{"start":1741777377861,"stop":1741777378147,"duration":286},"description":"Test trimming of whitespace in all columns.","descriptionHtml":"<p>Test trimming of whitespace in all columns.</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[product_id: string, product_name: string, category: string].count\n +      where DataFrame[product_id: string, product_name: string, category: string] = filter(Column<'product_name'> == 'Laptop')\n +        where filter = DataFrame[product_id: string, product_name: string, category: string].filter\n +        and   Column<'product_name'> = DataFrame[product_id: string, product_name: string, category: string].product_name","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f9a12d225e0>\n\n    def test_clean_products_data_whitespace_trimming(spark_session):\n        \"\"\"Test trimming of whitespace in all columns.\"\"\"\n        data = [\n            (\"  P001  \", \"  Laptop  \", \"  Electronics  \"),\n            (\"P002\", \" Smartphone \", \" Mobile \"),\n            (\" P003 \", \"Headphones\", \"Audio\"),\n        ]\n        schema = StructType(\n            [\n                StructField(\"PRODUCT_ID\", StringType(), True),\n                StructField(\"product.name\", StringType(), True),\n                StructField(\"category\", StringType(), True),\n            ]\n        )\n        test_df = spark_session.createDataFrame(data=data, schema=schema)\n    \n        result_df = clean_products_data(test_df)\n    \n        # Check whitespace trimming\n>       assert result_df.filter(result_df.product_name == \"Laptop\").count() == 1\nE       AssertionError: assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[product_id: string, product_name: string, category: string].count\nE        +      where DataFrame[product_id: string, product_name: string, category: string] = filter(Column<'product_name'> == 'Laptop')\nE        +        where filter = DataFrame[product_id: string, product_name: string, category: string].filter\nE        +        and   Column<'product_name'> = DataFrame[product_id: string, product_name: string, category: string].product_name\n\ntest_products.py:178: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741777372095,"stop":1741777372181,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1741777379227,"stop":1741777380190,"duration":963},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_products"},{"name":"host","value":"fv-az1770-715"},{"name":"thread","value":"2967-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6508e9d52e558ae8","status":"failed","statusDetails":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[product_id: string, product_name: string, category: string].count\n +      where DataFrame[product_id: string, product_name: string, category: string] = filter(Column<'product_name'> == 'Laptop')\n +        where filter = DataFrame[product_id: string, product_name: string, category: string].filter\n +        and   Column<'product_name'> = DataFrame[product_id: string, product_name: string, category: string].product_name","time":{"start":1741777377545,"stop":1741777377851,"duration":306}},{"uid":"1244880d951d40d1","status":"failed","statusDetails":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[product_id: string, product_name: string, category: string].count\n +      where DataFrame[product_id: string, product_name: string, category: string] = filter(Column<'product_name'> == 'Laptop')\n +        where filter = DataFrame[product_id: string, product_name: string, category: string].filter\n +        and   Column<'product_name'> = DataFrame[product_id: string, product_name: string, category: string].product_name","time":{"start":1741777377201,"stop":1741777377533,"duration":332}},{"uid":"bd1e202cbd835f04","status":"failed","statusDetails":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[product_id: string, product_name: string, category: string].count\n +      where DataFrame[product_id: string, product_name: string, category: string] = filter(Column<'product_name'> == 'Laptop')\n +        where filter = DataFrame[product_id: string, product_name: string, category: string].filter\n +        and   Column<'product_name'> = DataFrame[product_id: string, product_name: string, category: string].product_name","time":{"start":1741777376726,"stop":1741777377127,"duration":401}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b6c15488b1107bd9.json","parameterValues":[]}