{"uid":"36d74a5748055b3d","name":"test_clean_products_data_invalid_categories","fullName":"test_products#test_clean_products_data_invalid_categories","historyId":"2908b4b9bce94f56ed87d30b5aad0d84","time":{"start":1741776904457,"stop":1741776905661,"duration":1204},"description":"Test handling of invalid categories.","descriptionHtml":"<p>Test handling of invalid categories.</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[product_id: string, product_name: string, category: string].count","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f1efdeb7460>\n\n    def test_clean_products_data_invalid_categories(spark_session):\n        \"\"\"Test handling of invalid categories.\"\"\"\n        data = [\n            (\"P001\", \"Laptop\", \"Electronics\"),\n            (\"P002\", \"Smartphone\", \"\"),\n            (\"P003\", \"Headphones\", \"NULL\"),\n            (\"P004\", \"T-Shirt\", \"Unknown\"),\n            (\"P005\", \"Jeans\", \"N/A\"),\n            (\"P006\", \"Coffee Maker\", None),\n        ]\n        schema = StructType(\n            [\n                StructField(\"PRODUCT_ID\", StringType(), True),\n                StructField(\"product.name\", StringType(), True),\n                StructField(\"category\", StringType(), True),\n            ]\n        )\n        test_df = spark_session.createDataFrame(data=data, schema=schema)\n    \n        result_df = clean_products_data(test_df)\n    \n        # Only one row should remain with valid category\n>       assert result_df.count() == 1\nE       assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[product_id: string, product_name: string, category: string].count\n\ntest_products.py:197: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741776900114,"stop":1741776900202,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test handling of invalid categories.","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[product_id: string, product_name: string, category: string].count","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f1efdeb7460>\n\n    def test_clean_products_data_invalid_categories(spark_session):\n        \"\"\"Test handling of invalid categories.\"\"\"\n        data = [\n            (\"P001\", \"Laptop\", \"Electronics\"),\n            (\"P002\", \"Smartphone\", \"\"),\n            (\"P003\", \"Headphones\", \"NULL\"),\n            (\"P004\", \"T-Shirt\", \"Unknown\"),\n            (\"P005\", \"Jeans\", \"N/A\"),\n            (\"P006\", \"Coffee Maker\", None),\n        ]\n        schema = StructType(\n            [\n                StructField(\"PRODUCT_ID\", StringType(), True),\n                StructField(\"product.name\", StringType(), True),\n                StructField(\"category\", StringType(), True),\n            ]\n        )\n        test_df = spark_session.createDataFrame(data=data, schema=schema)\n    \n        result_df = clean_products_data(test_df)\n    \n        # Only one row should remain with valid category\n>       assert result_df.count() == 1\nE       assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[product_id: string, product_name: string, category: string].count\n\ntest_products.py:197: AssertionError","steps":[],"attachments":[{"uid":"74abb43d4ccff0df","name":"stderr","source":"74abb43d4ccff0df.txt","type":"text/plain","size":164}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"spark_session::0","time":{"start":1741776911064,"stop":1741776912034,"duration":970},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_products"},{"name":"host","value":"fv-az1315-326"},{"name":"thread","value":"2992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"36d74a5748055b3d.json","parameterValues":[]}