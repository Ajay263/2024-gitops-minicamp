{"uid":"7d6f4dc8deb7f764","name":"test_clean_products_data_invalid_product_names","fullName":"test_products#test_clean_products_data_invalid_product_names","historyId":"5b9c532fed02b046ec8490a1dc94ebc5","time":{"start":1741776906849,"stop":1741776907098,"duration":249},"description":"Test handling of invalid product names.","descriptionHtml":"<p>Test handling of invalid product names.</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[product_id: string, product_name: string, category: string].count","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f1efdeb7460>\n\n    def test_clean_products_data_invalid_product_names(spark_session):\n        \"\"\"Test handling of invalid product names.\"\"\"\n        data = [\n            (\"P001\", \"Laptop\", \"Electronics\"),\n            (\"P002\", \"\", \"Electronics\"),\n            (\"P003\", \"N/A\", \"Electronics\"),\n            (\"P004\", \"NULL\", \"Electronics\"),\n            (\"P005\", \"Unknown\", \"Electronics\"),\n            (\"P006\", None, \"Electronics\"),\n        ]\n        schema = StructType(\n            [\n                StructField(\"PRODUCT_ID\", StringType(), True),\n                StructField(\"product.name\", StringType(), True),\n                StructField(\"category\", StringType(), True),\n            ]\n        )\n        test_df = spark_session.createDataFrame(data=data, schema=schema)\n    \n        result_df = clean_products_data(test_df)\n    \n        # Only one row should remain with valid product name\n>       assert result_df.count() == 1\nE       assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[product_id: string, product_name: string, category: string].count\n\ntest_products.py:223: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741776900114,"stop":1741776900202,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1741776911064,"stop":1741776912034,"duration":970},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_products"},{"name":"host","value":"fv-az1315-326"},{"name":"thread","value":"2992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"7d6f4dc8deb7f764.json","parameterValues":[]}