{"uid":"16adb20bc32f01c","name":"test_clean_products_data_integration","fullName":"test_products#test_clean_products_data_integration","historyId":"e80c562ee86d26417efbc1f5d27275b0","time":{"start":1741776904235,"stop":1741776904338,"duration":103},"description":"Integration test for the entire data cleaning pipeline.","descriptionHtml":"<p>Integration test for the entire data cleaning pipeline.</p>\n","status":"failed","statusMessage":"AssertionError: assert StringType() == IntegerType()\n +  where StringType() = StructField('product_id', StringType(), True).dataType\n +  and   IntegerType() = IntegerType()","statusTrace":"sample_products_df = DataFrame[PRODUCT_ID: string, product.name: string, category: string]\nexpected_schema = StructType([StructField('product_id', IntegerType(), True), StructField('product_name', StringType(), True), StructField('category', StringType(), True)])\n\n    def test_clean_products_data_integration(sample_products_df, expected_schema):\n        \"\"\"Integration test for the entire data cleaning pipeline.\"\"\"\n        result_df = clean_products_data(sample_products_df)\n    \n        # Check schema\n        for field in expected_schema:\n            assert field.name in result_df.columns\n>       assert result_df.schema[\"product_id\"].dataType == IntegerType()\nE       AssertionError: assert StringType() == IntegerType()\nE        +  where StringType() = StructField('product_id', StringType(), True).dataType\nE        +  and   IntegerType() = IntegerType()\n\ntest_products.py:127: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741776900114,"stop":1741776900202,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"sample_products_df","time":{"start":1741776904217,"stop":1741776904234,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"expected_schema","time":{"start":1741776904234,"stop":1741776904234,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1741776911064,"stop":1741776912034,"duration":970},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_products"},{"name":"host","value":"fv-az1315-326"},{"name":"thread","value":"2992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a89c8d03dbc3e7d1","status":"failed","statusDetails":"AssertionError: assert StringType() == IntegerType()\n +  where StringType() = StructField('product_id', StringType(), True).dataType\n +  and   IntegerType() = IntegerType()","time":{"start":1741776904112,"stop":1741776904206,"duration":94}},{"uid":"3314c92721d11431","status":"failed","statusDetails":"AssertionError: assert StringType() == IntegerType()\n +  where StringType() = StructField('product_id', StringType(), True).dataType\n +  and   IntegerType() = IntegerType()","time":{"start":1741776903968,"stop":1741776904085,"duration":117}},{"uid":"41d7f86eaf9c8e02","status":"failed","statusDetails":"AssertionError: assert StringType() == IntegerType()\n +  where StringType() = StructField('product_id', StringType(), True).dataType\n +  and   IntegerType() = IntegerType()","time":{"start":1741776903590,"stop":1741776903795,"duration":205}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"16adb20bc32f01c.json","parameterValues":[]}