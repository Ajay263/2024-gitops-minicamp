{"uid":"392227f7f3dfbfb1","name":"test_clean_products_data_product_id_conversion","fullName":"test_products#test_clean_products_data_product_id_conversion","historyId":"f62eddc0e1781b2d6d4897d237183d0d","time":{"start":1741776908555,"stop":1741776908887,"duration":332},"description":"Test that product_id is correctly converted to integer.","descriptionHtml":"<p>Test that product_id is correctly converted to integer.</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[product_id: string, product_name: string, category: string].count\n +      where DataFrame[product_id: string, product_name: string, category: string] = filter(Column<'product_id'> == 1)\n +        where filter = DataFrame[product_id: string, product_name: string, category: string].filter\n +        and   Column<'product_id'> = DataFrame[product_id: string, product_name: string, category: string].product_id","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f1efdeb7460>\n\n    def test_clean_products_data_product_id_conversion(spark_session):\n        \"\"\"Test that product_id is correctly converted to integer.\"\"\"\n        data = [\n            (\"P001\", \"Laptop\", \"Electronics\"),\n            (\"P002 units\", \"Smartphone\", \"Electronics\"),\n            (\"P003\", \"Headphones\", \"Electronics\"),\n            (\"P004abc\", \"T-Shirt\", \"Apparel\"),  # Non-numeric after cleaning\n            (None, \"Vacuum\", \"Appliances\"),\n        ]\n        schema = StructType(\n            [\n                StructField(\"PRODUCT_ID\", StringType(), True),\n                StructField(\"product.name\", StringType(), True),\n                StructField(\"category\", StringType(), True),\n            ]\n        )\n        test_df = spark_session.createDataFrame(data=data, schema=schema)\n    \n        result_df = clean_products_data(test_df)\n    \n        # Check ID conversion\n        assert all(isinstance(row.product_id, int) for row in result_df.collect())\n>       assert result_df.filter(result_df.product_id == 1).count() == 1\nE       AssertionError: assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[product_id: string, product_name: string, category: string].count\nE        +      where DataFrame[product_id: string, product_name: string, category: string] = filter(Column<'product_id'> == 1)\nE        +        where filter = DataFrame[product_id: string, product_name: string, category: string].filter\nE        +        and   Column<'product_id'> = DataFrame[product_id: string, product_name: string, category: string].product_id\n\ntest_products.py:249: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1741776900114,"stop":1741776900202,"duration":88},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1741776911064,"stop":1741776912034,"duration":970},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_products"},{"name":"host","value":"fv-az1315-326"},{"name":"thread","value":"2992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"392227f7f3dfbfb1.json","parameterValues":[]}