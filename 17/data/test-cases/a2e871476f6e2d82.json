{"uid":"a2e871476f6e2d82","name":"test_clean_order_lines_data_integration","fullName":"test_order_lines#test_clean_order_lines_data_integration","historyId":"c2d965e434cf3d50d46d1fc787fe264c","time":{"start":1744634533451,"stop":1744634533730,"duration":279},"description":"Integration test for the entire data cleaning pipeline.","descriptionHtml":"<p>Integration test for the entire data cleaning pipeline.</p>\n","status":"broken","statusMessage":"pyspark.errors.exceptions.captured.SparkUpgradeException: [INCONSISTENT_BEHAVIOR_CROSS_VERSION.DATETIME_PATTERN_RECOGNITION] You may get a different result due to the upgrading to Spark >= 3.0:\nFail to recognize 'EEEE, MMMM d, yyyy' pattern in the DateTimeFormatter. 1) You can set \"spark.sql.legacy.timeParserPolicy\" to \"LEGACY\" to restore the behavior before Spark 3.0. 2) You can form a valid datetime pattern with the guide from 'https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html'.","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f933c5ed820>\nsample_order_lines_df = DataFrame[ORDER_ID: string, PRODUCT_ID: string, ORDER_QTY: float, AGREED_DELIVERY_DATE: string, ACTUAL_DELIVERY_DATE: string, DELIVERY_QTY: string]\n\n    def test_clean_order_lines_data_integration(spark_session, sample_order_lines_df):\n        \"\"\"Integration test for the entire data cleaning pipeline.\"\"\"\n        result_df = clean_order_lines_data(sample_order_lines_df)\n        valid_order_ids = [\"ORD123\", \"ORD456\"]\n        expected_columns = [\n            \"order_id\",\n            \"product_id\",\n            \"order_qty\",\n            \"agreed_delivery_date\",\n            \"actual_delivery_date\",\n            \"delivery_qty\",\n            \"delivery_delay_days\",\n            \"delivery_completion_rate\",\n            \"is_on_time\",\n            \"is_complete_delivery\",\n        ]\n        for col_name in expected_columns:\n            assert col_name in result_df.columns\n        assert result_df.schema[\"order_id\"].dataType == StringType()\n        assert result_df.schema[\"product_id\"].dataType == IntegerType()\n        assert result_df.schema[\"order_qty\"].dataType == IntegerType()\n        assert result_df.schema[\"delivery_qty\"].dataType == IntegerType()\n        assert result_df.schema[\"agreed_delivery_date\"].dataType == DateType()\n        assert result_df.schema[\"actual_delivery_date\"].dataType == DateType()\n>       if result_df.filter(result_df.order_id == \"ORD123\").count() > 0:\n\ntest_order_lines.py:379: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/pyspark/sql/dataframe.py:1240: in count\n    return int(self._jdf.count())\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/py4j/java_gateway.py:1322: in __call__\n    return_value = get_return_value(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = ('xro3000', <py4j.clientserver.JavaClient object at 0x7f933c352400>, 'o2999', 'count')\nkw = {}, converted = SparkUpgradeException()\n\n    def deco(*a: Any, **kw: Any) -> Any:\n        try:\n            return f(*a, **kw)\n        except Py4JJavaError as e:\n            converted = convert_exception(e.java_exception)\n            if not isinstance(converted, UnknownException):\n                # Hide where the exception came from that shows a non-Pythonic\n                # JVM exception message.\n>               raise converted from None\nE               pyspark.errors.exceptions.captured.SparkUpgradeException: [INCONSISTENT_BEHAVIOR_CROSS_VERSION.DATETIME_PATTERN_RECOGNITION] You may get a different result due to the upgrading to Spark >= 3.0:\nE               Fail to recognize 'EEEE, MMMM d, yyyy' pattern in the DateTimeFormatter. 1) You can set \"spark.sql.legacy.timeParserPolicy\" to \"LEGACY\" to restore the behavior before Spark 3.0. 2) You can form a valid datetime pattern with the guide from 'https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html'.\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/pyspark/errors/exceptions/captured.py:185: SparkUpgradeException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1744634527419,"stop":1744634527425,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"sample_order_lines_df","time":{"start":1744634533441,"stop":1744634533451,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1744634539464,"stop":1744634539465,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_order_lines"},{"name":"host","value":"fv-az1074-191"},{"name":"thread","value":"3036-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_order_lines"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6f3dcc25b9f1af67","status":"broken","statusDetails":"pyspark.errors.exceptions.captured.SparkUpgradeException: [INCONSISTENT_BEHAVIOR_CROSS_VERSION.DATETIME_PATTERN_RECOGNITION] You may get a different result due to the upgrading to Spark >= 3.0:\nFail to recognize 'EEEE, MMMM d, yyyy' pattern in the DateTimeFormatter. 1) You can set \"spark.sql.legacy.timeParserPolicy\" to \"LEGACY\" to restore the behavior before Spark 3.0. 2) You can form a valid datetime pattern with the guide from 'https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html'.","time":{"start":1744634532901,"stop":1744634533188,"duration":287}},{"uid":"7a2d02bd9e021f0d","status":"broken","statusDetails":"pyspark.errors.exceptions.captured.SparkUpgradeException: [INCONSISTENT_BEHAVIOR_CROSS_VERSION.DATETIME_PATTERN_RECOGNITION] You may get a different result due to the upgrading to Spark >= 3.0:\nFail to recognize 'EEEE, MMMM d, yyyy' pattern in the DateTimeFormatter. 1) You can set \"spark.sql.legacy.timeParserPolicy\" to \"LEGACY\" to restore the behavior before Spark 3.0. 2) You can form a valid datetime pattern with the guide from 'https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html'.","time":{"start":1744634532370,"stop":1744634532670,"duration":300}},{"uid":"f6e767f1ffdaddbe","status":"broken","statusDetails":"pyspark.errors.exceptions.captured.SparkUpgradeException: [INCONSISTENT_BEHAVIOR_CROSS_VERSION.DATETIME_PATTERN_RECOGNITION] You may get a different result due to the upgrading to Spark >= 3.0:\nFail to recognize 'EEEE, MMMM d, yyyy' pattern in the DateTimeFormatter. 1) You can set \"spark.sql.legacy.timeParserPolicy\" to \"LEGACY\" to restore the behavior before Spark 3.0. 2) You can form a valid datetime pattern with the guide from 'https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html'.","time":{"start":1744634531799,"stop":1744634532109,"duration":310}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"94ad5c1818696172","reportUrl":"https://Ajay263.github.io/2024-gitops-minicamp/33//#testresult/94ad5c1818696172","status":"broken","statusDetails":"pyspark.errors.exceptions.captured.SparkUpgradeException: [INCONSISTENT_BEHAVIOR_CROSS_VERSION.DATETIME_PATTERN_RECOGNITION] You may get a different result due to the upgrading to Spark >= 3.0:\nFail to recognize 'EEEE, MMMM d, yyyy' pattern in the DateTimeFormatter. 1) You can set \"spark.sql.legacy.timeParserPolicy\" to \"LEGACY\" to restore the behavior before Spark 3.0. 2) You can form a valid datetime pattern with the guide from 'https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html'.","time":{"start":1744634155135,"stop":1744634155449,"duration":314}}]},"tags":[]},"source":"a2e871476f6e2d82.json","parameterValues":[]}