{"uid":"a0179e54aeaa2c5c","name":"test_task_dependencies","fullName":"test.test_dbt_simple_task_group.TestNexabrandsDbtIncrementalDag#test_task_dependencies","historyId":"712cc4addafa2e4153014a9664fb2231","time":{"start":1744710208604,"stop":1744710208604,"duration":0},"description":"Test task dependencies in the DAG","descriptionHtml":"<p>Test task dependencies in the DAG</p>\n","status":"broken","statusMessage":"sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: dag\n[SQL: SELECT dag.dag_display_name, dag.dag_id, dag.root_dag_id, dag.is_paused, dag.is_subdag, dag.is_active, dag.last_parsed_time, dag.last_pickled, dag.last_expired, dag.scheduler_lock, dag.pickle_id, dag.fileloc, dag.processor_subdir, dag.owners, dag.description, dag.default_view, dag.schedule_interval, dag.timetable_description, dag.dataset_expression, dag.max_active_tasks, dag.max_active_runs, dag.max_consecutive_failed_dag_runs, dag.has_task_concurrency_limits, dag.has_import_errors, dag.next_dagrun, dag.next_dagrun_data_interval_start, dag.next_dagrun_data_interval_end, dag.next_dagrun_create_after \nFROM dag \nWHERE dag.dag_id = ?]\n[parameters: ('nexabrands_dbt_incremental_dag',)]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)","statusTrace":"self = <sqlalchemy.future.engine.Connection object at 0x7f94fadbbcd0>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f950abcf520>\nconstructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\nstatement = 'SELECT dag.dag_display_name, dag.dag_id, dag.root_dag_id, dag.is_paused, dag.is_subdag, dag.is_active, dag.last_parse...data_interval_start, dag.next_dagrun_data_interval_end, dag.next_dagrun_create_after \\nFROM dag \\nWHERE dag.dag_id = ?'\nparameters = ('nexabrands_dbt_incremental_dag',)\nexecution_options = immutabledict({'_result_disable_adapt_to_context': True, 'future_result': True})\nargs = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f950cabf700>, [{}], <sqlalchemy.sql.selectable.Select ob...94fadbbeb0>, [BindParameter('%(140277840592800 dag_id)s', 'nexabrands_dbt_incremental_dag', type_=String(length=250))])\nkw = {'cache_hit': symbol('CACHE_HIT')}\nbranched = <sqlalchemy.future.engine.Connection object at 0x7f94fadbbcd0>\nyp = None\nconn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7f94fadbbb50>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f94fadbb880>\ncursor = <sqlite3.Cursor object at 0x7f94fa92a650>, evt_handled = False\n\n    def _execute_context(\n        self,\n        dialect,\n        constructor,\n        statement,\n        parameters,\n        execution_options,\n        *args,\n        **kw\n    ):\n        \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n        a :class:`_engine.CursorResult`.\"\"\"\n    \n        branched = self\n        if self.__branch_from:\n            # if this is a \"branched\" connection, do everything in terms\n            # of the \"root\" connection, *except* for .close(), which is\n            # the only feature that branching provides\n            self = self.__branch_from\n    \n        if execution_options:\n            yp = execution_options.get(\"yield_per\", None)\n            if yp:\n                execution_options = execution_options.union(\n                    {\"stream_results\": True, \"max_row_buffer\": yp}\n                )\n    \n        try:\n            conn = self._dbapi_connection\n            if conn is None:\n                conn = self._revalidate_connection()\n    \n            context = constructor(\n                dialect, self, conn, execution_options, *args, **kw\n            )\n        except (exc.PendingRollbackError, exc.ResourceClosedError):\n            raise\n        except BaseException as e:\n            self._handle_dbapi_exception(\n                e, util.text_type(statement), parameters, None, None\n            )\n    \n        if (\n            self._transaction\n            and not self._transaction.is_active\n            or (\n                self._nested_transaction\n                and not self._nested_transaction.is_active\n            )\n        ):\n            self._invalid_transaction()\n    \n        elif self._trans_context_manager:\n            TransactionalContext._trans_ctx_check(self)\n    \n        if self._is_future and self._transaction is None:\n            self._autobegin()\n    \n        context.pre_exec()\n    \n        if dialect.use_setinputsizes:\n            context._set_input_sizes()\n    \n        cursor, statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        if not context.executemany:\n            parameters = parameters[0]\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                statement, parameters = fn(\n                    self,\n                    cursor,\n                    statement,\n                    parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n    \n            self._log_info(statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        parameters, batches=10, ismulti=context.executemany\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n                    % (stats,)\n                )\n    \n        evt_handled = False\n        try:\n            if context.executemany:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(cursor, statement, parameters, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor, statement, parameters, context\n                    )\n            elif not parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, statement, context\n                    )\n            else:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(cursor, statement, parameters, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, statement, parameters, context\n                    )\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1910: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f950abcf520>\ncursor = <sqlite3.Cursor object at 0x7f94fa92a650>\nstatement = 'SELECT dag.dag_display_name, dag.dag_id, dag.root_dag_id, dag.is_paused, dag.is_subdag, dag.is_active, dag.last_parse...data_interval_start, dag.next_dagrun_data_interval_end, dag.next_dagrun_create_after \\nFROM dag \\nWHERE dag.dag_id = ?'\nparameters = ('nexabrands_dbt_incremental_dag',)\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f94fadbb880>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: dag\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_dbt_simple_task_group.TestNexabrandsDbtIncrementalDag object at 0x7f94fb8167c0>\ndagbag = <airflow.models.dagbag.DagBag object at 0x7f94fb6e9730>\n\n    @pytest.fixture\n    def nexabrands_dag(self, dagbag):\n        \"\"\"Fixture that provides the nexabrands_dbt_incremental_dag\"\"\"\n        dag_id = \"nexabrands_dbt_incremental_dag\"\n>       return dagbag.get_dag(dag_id)\n\ntest/test_dbt_simple_task_group.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/utils/session.py:97: in wrapper\n    return func(*args, session=session, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/models/dagbag.py:267: in get_dag\n    orm_dag = DagModel.get_current(root_dag_id, session=session)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/api_internal/internal_api_call.py:166: in wrapper\n    return func(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/utils/session.py:94: in wrapper\n    return func(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/models/dag.py:3950: in get_current\n    return session.scalar(select(cls).where(cls.dag_id == dag_id))\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/orm/session.py:1747: in scalar\n    return self.execute(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/orm/session.py:1717: in execute\n    result = conn._execute_20(statement, params or {}, execution_options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1710: in _execute_20\n    return meth(self, args_10style, kwargs_10style, execution_options)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/sql/elements.py:334: in _execute_on_connection\n    return connection._execute_clauseelement(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1577: in _execute_clauseelement\n    ret = self._execute_context(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1953: in _execute_context\n    self._handle_dbapi_exception(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py:2134: in _handle_dbapi_exception\n    util.raise_(\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/util/compat.py:211: in raise_\n    raise exception\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py:1910: in _execute_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f950abcf520>\ncursor = <sqlite3.Cursor object at 0x7f94fa92a650>\nstatement = 'SELECT dag.dag_display_name, dag.dag_id, dag.root_dag_id, dag.is_paused, dag.is_subdag, dag.is_active, dag.last_parse...data_interval_start, dag.next_dagrun_data_interval_end, dag.next_dagrun_create_after \\nFROM dag \\nWHERE dag.dag_id = ?'\nparameters = ('nexabrands_dbt_incremental_dag',)\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f94fadbb880>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: dag\nE       [SQL: SELECT dag.dag_display_name, dag.dag_id, dag.root_dag_id, dag.is_paused, dag.is_subdag, dag.is_active, dag.last_parsed_time, dag.last_pickled, dag.last_expired, dag.scheduler_lock, dag.pickle_id, dag.fileloc, dag.processor_subdir, dag.owners, dag.description, dag.default_view, dag.schedule_interval, dag.timetable_description, dag.dataset_expression, dag.max_active_tasks, dag.max_active_runs, dag.max_consecutive_failed_dag_runs, dag.has_task_concurrency_limits, dag.has_import_errors, dag.next_dagrun, dag.next_dagrun_data_interval_start, dag.next_dagrun_data_interval_end, dag.next_dagrun_create_after \nE       FROM dag \nE       WHERE dag.dag_id = ?]\nE       [parameters: ('nexabrands_dbt_incremental_dag',)]\nE       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/default.py:736: OperationalError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"dagbag","time":{"start":1744710204450,"stop":1744710204451,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"nexabrands_dag","time":{"start":1744710208604,"stop":1744710208606,"duration":2},"status":"broken","statusMessage":"sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: dag\n[SQL: SELECT dag.dag_display_name, dag.dag_id, dag.root_dag_id, dag.is_paused, dag.is_subdag, dag.is_active, dag.last_parsed_time, dag.last_pickled, dag.last_expired, dag.scheduler_lock, dag.pickle_id, dag.fileloc, dag.processor_subdir, dag.owners, dag.description, dag.default_view, dag.schedule_interval, dag.timetable_description, dag.dataset_expression, dag.max_active_tasks, dag.max_active_runs, dag.max_consecutive_failed_dag_runs, dag.has_task_concurrency_limits, dag.has_import_errors, dag.next_dagrun, dag.next_dagrun_data_interval_start, dag.next_dagrun_data_interval_end, dag.next_dagrun_create_after \nFROM dag \nWHERE dag.dag_id = ?]\n[parameters: ('nexabrands_dbt_incremental_dag',)]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/_pytest/fixtures.py\", line 898, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/2024-gitops-minicamp/2024-gitops-minicamp/airflow/test/test_dbt_simple_task_group.py\", line 14, in nexabrands_dag\n    return dagbag.get_dag(dag_id)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/utils/session.py\", line 97, in wrapper\n    return func(*args, session=session, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/models/dagbag.py\", line 267, in get_dag\n    orm_dag = DagModel.get_current(root_dag_id, session=session)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/api_internal/internal_api_call.py\", line 166, in wrapper\n    return func(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/utils/session.py\", line 94, in wrapper\n    return func(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/airflow/models/dag.py\", line 3950, in get_current\n    return session.scalar(select(cls).where(cls.dag_id == dag_id))\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/orm/session.py\", line 1747, in scalar\n    return self.execute(\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/orm/session.py\", line 1717, in execute\n    result = conn._execute_20(statement, params or {}, execution_options)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py\", line 1710, in _execute_20\n    return meth(self, args_10style, kwargs_10style, execution_options)\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/sql/elements.py\", line 334, in _execute_on_connection\n    return connection._execute_clauseelement(\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py\", line 1577, in _execute_clauseelement\n    ret = self._execute_context(\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py\", line 1953, in _execute_context\n    self._handle_dbapi_exception(\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py\", line 2134, in _handle_dbapi_exception\n    util.raise_(\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/util/compat.py\", line 211, in raise_\n    raise exception\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/base.py\", line 1910, in _execute_context\n    self.dialect.do_execute(\n  File \"/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/sqlalchemy/engine/default.py\", line 736, in do_execute\n    cursor.execute(statement, parameters)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_dbt_simple_task_group"},{"name":"subSuite","value":"TestNexabrandsDbtIncrementalDag"},{"name":"host","value":"fv-az1940-600"},{"name":"thread","value":"3940-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_dbt_simple_task_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"a0179e54aeaa2c5c.json","parameterValues":[]}