{"uid":"1cfa06e8d66c87e0","name":"test_dag_count","fullName":"test.test_dags_general.TestDagsGeneral#test_dag_count","historyId":"6d1f11ba488a77b795fec33eafaf921a","time":{"start":1744710204306,"stop":1744710204306,"duration":0},"description":"\n        Test that we have the expected number of DAGs.\n        \n        This test helps detect when DAGs are accidentally removed or added\n        without updating the expected count.\n        ","descriptionHtml":"<pre><code>    Test that we have the expected number of DAGs.\n    \n    This test helps detect when DAGs are accidentally removed or added\n    without updating the expected count.\n</code></pre>\n","status":"failed","statusMessage":"AssertionError: Expected 3 DAGs, got 2\nassert 2 == 3\n +  where 2 = len({'dbt_docs_generator': <DAG: dbt_docs_generator>, 'etl_pipeline': <DAG: etl_pipeline>})\n +    where {'dbt_docs_generator': <DAG: dbt_docs_generator>, 'etl_pipeline': <DAG: etl_pipeline>} = <airflow.models.dagbag.DagBag object at 0x7f94fb78c880>.dags","statusTrace":"self = <test_dags_general.TestDagsGeneral object at 0x7f94fb8872e0>\ndagbag = <airflow.models.dagbag.DagBag object at 0x7f94fb78c880>\n\n    def test_dag_count(self, dagbag):\n        \"\"\"\n        Test that we have the expected number of DAGs.\n    \n        This test helps detect when DAGs are accidentally removed or added\n        without updating the expected count.\n        \"\"\"\n        # Replace the expected count with the actual number of your DAGs\n        expected_dag_count = 3  # Adjust based on your project\n>       assert len(dagbag.dags) == expected_dag_count, f\"Expected {expected_dag_count} DAGs, got {len(dagbag.dags)}\"\nE       AssertionError: Expected 3 DAGs, got 2\nE       assert 2 == 3\nE        +  where 2 = len({'dbt_docs_generator': <DAG: dbt_docs_generator>, 'etl_pipeline': <DAG: etl_pipeline>})\nE        +    where {'dbt_docs_generator': <DAG: dbt_docs_generator>, 'etl_pipeline': <DAG: etl_pipeline>} = <airflow.models.dagbag.DagBag object at 0x7f94fb78c880>.dags\n\ntest/test_dags_general.py:99: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"dagbag","time":{"start":1744710204289,"stop":1744710204305,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"dagbag","time":{"start":1744710204450,"stop":1744710204451,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        Test that we have the expected number of DAGs.\n        \n        This test helps detect when DAGs are accidentally removed or added\n        without updating the expected count.\n        ","status":"failed","statusMessage":"AssertionError: Expected 3 DAGs, got 2\nassert 2 == 3\n +  where 2 = len({'dbt_docs_generator': <DAG: dbt_docs_generator>, 'etl_pipeline': <DAG: etl_pipeline>})\n +    where {'dbt_docs_generator': <DAG: dbt_docs_generator>, 'etl_pipeline': <DAG: etl_pipeline>} = <airflow.models.dagbag.DagBag object at 0x7f94fb78c880>.dags","statusTrace":"self = <test_dags_general.TestDagsGeneral object at 0x7f94fb8872e0>\ndagbag = <airflow.models.dagbag.DagBag object at 0x7f94fb78c880>\n\n    def test_dag_count(self, dagbag):\n        \"\"\"\n        Test that we have the expected number of DAGs.\n    \n        This test helps detect when DAGs are accidentally removed or added\n        without updating the expected count.\n        \"\"\"\n        # Replace the expected count with the actual number of your DAGs\n        expected_dag_count = 3  # Adjust based on your project\n>       assert len(dagbag.dags) == expected_dag_count, f\"Expected {expected_dag_count} DAGs, got {len(dagbag.dags)}\"\nE       AssertionError: Expected 3 DAGs, got 2\nE       assert 2 == 3\nE        +  where 2 = len({'dbt_docs_generator': <DAG: dbt_docs_generator>, 'etl_pipeline': <DAG: etl_pipeline>})\nE        +    where {'dbt_docs_generator': <DAG: dbt_docs_generator>, 'etl_pipeline': <DAG: etl_pipeline>} = <airflow.models.dagbag.DagBag object at 0x7f94fb78c880>.dags\n\ntest/test_dags_general.py:99: AssertionError","steps":[],"attachments":[{"uid":"f64b04480f1f1f18","name":"log","source":"f64b04480f1f1f18.txt","type":"text/plain","size":1942},{"uid":"e450d8e160cdf89c","name":"stdout","source":"e450d8e160cdf89c.txt","type":"text/plain","size":1960}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_dags_general"},{"name":"subSuite","value":"TestDagsGeneral"},{"name":"host","value":"fv-az1940-600"},{"name":"thread","value":"3940-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_dags_general"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1cfa06e8d66c87e0.json","parameterValues":[]}