{"uid":"d36753a75a8d3cb0","name":"test_transform_metrics","fullName":"test_order_fulfillment#test_transform_metrics","historyId":"0629e98d19fdf15d2a934bca3faf5e96","time":{"start":1737962337181,"stop":1737962338053,"duration":872},"description":"Test transforming the metrics columns ('on_time', 'in_full', 'otif').","descriptionHtml":"<p>Test transforming the metrics columns ('on_time', 'in_full', 'otif').</p>\n","status":"failed","statusMessage":"AssertionError: assert 2 == 1\n +  where 2 = count()\n +    where count = DataFrame[on_time: int, in_full: int, otif: int].count\n +      where DataFrame[on_time: int, in_full: int, otif: int] = filter(Column<'(otif IS NULL)'>)\n +        where filter = DataFrame[on_time: int, in_full: int, otif: int].filter\n +        and   Column<'(otif IS NULL)'> = _()\n +          where _ = Column<'otif'>.isNull\n +            where Column<'otif'> = col('otif')","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f3ceb4d17f0>\n\n    def test_transform_metrics(spark_session):\n        \"\"\"Test transforming the metrics columns ('on_time', 'in_full', 'otif').\"\"\"\n        df = spark_session.createDataFrame(\n            [(1.0, 0.5, 0.8), (-1.0, 1.0, 0.0), (2.0, 3.0, 4.0)],\n            schema=[\"on_time\", \"in_full\", \"otif\"],\n        )\n        transformed_df = transform_metrics(df)\n        assert transformed_df.filter(col(\"on_time\") == 1).count() == 2\n        assert transformed_df.filter(col(\"in_full\") == 0).count() == 1\n>       assert transformed_df.filter(col(\"otif\").isNull()).count() == 1\nE       AssertionError: assert 2 == 1\nE        +  where 2 = count()\nE        +    where count = DataFrame[on_time: int, in_full: int, otif: int].count\nE        +      where DataFrame[on_time: int, in_full: int, otif: int] = filter(Column<'(otif IS NULL)'>)\nE        +        where filter = DataFrame[on_time: int, in_full: int, otif: int].filter\nE        +        and   Column<'(otif IS NULL)'> = _()\nE        +          where _ = Column<'otif'>.isNull\nE        +            where Column<'otif'> = col('otif')\n\ntest_order_fulfillment.py:102: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1737962328414,"stop":1737962333216,"duration":4802},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1737962338910,"stop":1737962339892,"duration":982},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_order_fulfillment"},{"name":"host","value":"fv-az1675-613"},{"name":"thread","value":"2443-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_order_fulfillment"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d36753a75a8d3cb0.json","parameterValues":[]}