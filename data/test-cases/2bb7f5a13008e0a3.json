{"uid":"2bb7f5a13008e0a3","name":"test_clean_customer_data","fullName":"test_customers#test_clean_customer_data","historyId":"fecaf68683d46ef1b7acc70290f991b0","time":{"start":1737977586625,"stop":1737977587097,"duration":472},"description":"Test cleaning and transforming customer data.","descriptionHtml":"<p>Test cleaning and transforming customer data.</p>\n","status":"failed","statusMessage":"AssertionError: assert 2 == 1\n +  where 2 = count()\n +    where count = DataFrame[customer_id: int, customer_name: string, city: string].count","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7ff48d2bde80>\n\n    def test_clean_customer_data(spark_session):\n        \"\"\"Test cleaning and transforming customer data.\"\"\"\n        df = spark_session.createDataFrame(\n            [\n                (1.0, \" john-doe \", \" new_york \"),\n                (2.5, \"Jane Doe\", \"Chicago\"),\n            ],  # Second row should be filtered out\n            schema=[\"CUSTOMER_ID\", \"customer_name\", \"city\"],\n        )\n        cleaned_df = clean_customer_data(df)\n>       assert cleaned_df.count() == 1\nE       assert 2 == 1\nE        +  where 2 = count()\nE        +    where count = DataFrame[customer_id: int, customer_name: string, city: string].count\n\ntest_customers.py:123: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1737977577139,"stop":1737977581262,"duration":4123},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1737977587105,"stop":1737977588057,"duration":952},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_customers"},{"name":"host","value":"fv-az2027-431"},{"name":"thread","value":"2440-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_customers"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"2bb7f5a13008e0a3.json","parameterValues":[]}