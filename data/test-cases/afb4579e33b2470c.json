{"uid":"afb4579e33b2470c","name":"test_drop_invalid_rows","fullName":"test_customer_targets#test_drop_invalid_rows","historyId":"c5328634524973de0b31e3818f0bc104","time":{"start":1737987275475,"stop":1737987275811,"duration":336},"description":"Test dropping rows with invalid values.","descriptionHtml":"<p>Test dropping rows with invalid values.</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[CUSTOMER_ID: string, ontime_target%: double, infull_target%: double, OTIF_TARGET%: double].count","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f59fbf79d90>\n\n    def test_drop_invalid_rows(spark_session):\n        \"\"\"Test dropping rows with invalid values.\"\"\"\n        df = spark_session.createDataFrame(\n            [(\"ID_123 units\", 95.0, 90.0, 85.0), (\"ID_456 units\", -95.0, -90.0, -85.0)],\n            schema=[\"CUSTOMER_ID\", \"ontime_target%\", \"infull_target%\", \"OTIF_TARGET%\"],\n        )\n        cleaned_df = drop_invalid_rows(df)\n>       assert cleaned_df.count() == 1\nE       assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[CUSTOMER_ID: string, ontime_target%: double, infull_target%: double, OTIF_TARGET%: double].count\n\ntest_customer_targets.py:87: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1737987267314,"stop":1737987271281,"duration":3967},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1737987276686,"stop":1737987277538,"duration":852},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_customer_targets"},{"name":"host","value":"fv-az1676-337"},{"name":"thread","value":"2448-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_customer_targets"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"afb4579e33b2470c.json","parameterValues":[]}