{"uid":"c1bc3a4043da0920","name":"test_clean_string_columns","fullName":"test_customers#test_clean_string_columns","historyId":"4583ff72e4415afe844a774ee9b5a73f","time":{"start":1737976829779,"stop":1737976830019,"duration":240},"description":"Test cleaning and formatting string columns.","descriptionHtml":"<p>Test cleaning and formatting string columns.</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[CUSTOMER_ID: double, customer_name: string, city: string].count\n +      where DataFrame[CUSTOMER_ID: double, customer_name: string, city: string] = filter(Column<'customer_name'> == 'John Doe')\n +        where filter = DataFrame[CUSTOMER_ID: double, customer_name: string, city: string].filter\n +        and   Column<'customer_name'> = col('customer_name')","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f3d4a69ae80>\n\n    def test_clean_string_columns(spark_session):\n        \"\"\"Test cleaning and formatting string columns.\"\"\"\n        df = spark_session.createDataFrame(\n            [(1.0, \"john-doe\", \"new_york\")],\n            schema=[\"CUSTOMER_ID\", \"customer_name\", \"city\"],\n        )\n        cleaned_df = clean_string_columns(df, [\"customer_name\", \"city\"])\n>       assert cleaned_df.filter(col(\"customer_name\") == \"John Doe\").count() == 1\nE       AssertionError: assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[CUSTOMER_ID: double, customer_name: string, city: string].count\nE        +      where DataFrame[CUSTOMER_ID: double, customer_name: string, city: string] = filter(Column<'customer_name'> == 'John Doe')\nE        +        where filter = DataFrame[CUSTOMER_ID: double, customer_name: string, city: string].filter\nE        +        and   Column<'customer_name'> = col('customer_name')\n\ntest_customers.py:99: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1737976822728,"stop":1737976825403,"duration":2675},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1737976830473,"stop":1737976831425,"duration":952},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_customers"},{"name":"host","value":"fv-az813-161"},{"name":"thread","value":"2431-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_customers"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"c1bc3a4043da0920.json","parameterValues":[]}