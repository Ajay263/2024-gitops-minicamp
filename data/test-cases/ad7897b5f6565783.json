{"uid":"ad7897b5f6565783","name":"test_main_with_mocked_glue","fullName":"test_products#test_main_with_mocked_glue","historyId":"ed10f5a29ecbe474e31d3c04d3d0ec4b","time":{"start":1737709777894,"stop":1737709777946,"duration":52},"description":"Test the main function with mocked GlueContext and S3.","descriptionHtml":"<p>Test the main function with mocked GlueContext and S3.</p>\n","status":"failed","statusMessage":"AssertionError: Expected 'SparkContext' to have been called once. Called 0 times.","statusTrace":"mock_glue_context = <MagicMock name='GlueContext' id='139719695948960'>\nmock_spark_context = <MagicMock name='SparkContext' id='139719695961008'>\nmock_boto_client = <MagicMock name='client' id='139719695969008'>\nspark_session = <pyspark.sql.session.SparkSession object at 0x7f1307e7a9d0>\n\n    @patch(\"boto3.client\")\n    @patch(\"pyspark.context.SparkContext\")\n    @patch(\"awsglue.context.GlueContext\")\n    def test_main_with_mocked_glue(\n        mock_glue_context, mock_spark_context, mock_boto_client, spark_session\n    ):\n        \"\"\"Test the main function with mocked GlueContext and S3.\"\"\"\n        # Mock GlueContext and SparkContext\n        mock_glue_context.return_value = MagicMock()\n        mock_spark_context.return_value = MagicMock()\n    \n        # Mock S3 client\n        mock_s3 = mock_boto_client.return_value\n        mock_s3.list_objects_v2.return_value = {\n            \"CommonPrefixes\": [{\"Prefix\": \"products/temp/category=1/\"}]\n        }\n        mock_s3.copy_object.return_value = {}\n        mock_s3.delete_object.return_value = {}\n    \n        # Call the main function\n        main()\n    \n        # Verify GlueContext and SparkContext calls\n>       mock_spark_context.assert_called_once()\n\ntest_products.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MagicMock name='SparkContext' id='139719695961008'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'SparkContext' to have been called once. Called 0 times.\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/unittest/mock.py:886: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1737709773105,"stop":1737709773191,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test the main function with mocked GlueContext and S3.","status":"failed","statusMessage":"AssertionError: Expected 'SparkContext' to have been called once. Called 0 times.","statusTrace":"mock_glue_context = <MagicMock name='GlueContext' id='139719695948960'>\nmock_spark_context = <MagicMock name='SparkContext' id='139719695961008'>\nmock_boto_client = <MagicMock name='client' id='139719695969008'>\nspark_session = <pyspark.sql.session.SparkSession object at 0x7f1307e7a9d0>\n\n    @patch(\"boto3.client\")\n    @patch(\"pyspark.context.SparkContext\")\n    @patch(\"awsglue.context.GlueContext\")\n    def test_main_with_mocked_glue(\n        mock_glue_context, mock_spark_context, mock_boto_client, spark_session\n    ):\n        \"\"\"Test the main function with mocked GlueContext and S3.\"\"\"\n        # Mock GlueContext and SparkContext\n        mock_glue_context.return_value = MagicMock()\n        mock_spark_context.return_value = MagicMock()\n    \n        # Mock S3 client\n        mock_s3 = mock_boto_client.return_value\n        mock_s3.list_objects_v2.return_value = {\n            \"CommonPrefixes\": [{\"Prefix\": \"products/temp/category=1/\"}]\n        }\n        mock_s3.copy_object.return_value = {}\n        mock_s3.delete_object.return_value = {}\n    \n        # Call the main function\n        main()\n    \n        # Verify GlueContext and SparkContext calls\n>       mock_spark_context.assert_called_once()\n\ntest_products.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MagicMock name='SparkContext' id='139719695961008'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'SparkContext' to have been called once. Called 0 times.\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/unittest/mock.py:886: AssertionError","steps":[],"attachments":[{"uid":"9724792758bd6f5c","name":"stdout","source":"9724792758bd6f5c.txt","type":"text/plain","size":117}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"spark_session::0","time":{"start":1737709778004,"stop":1737709778844,"duration":840},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_products"},{"name":"host","value":"fv-az1944-431"},{"name":"thread","value":"2471-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ad7897b5f6565783.json","parameterValues":[]}