{"uid":"235f177a24751833","name":"test_clean_customer_id","fullName":"test_customers#test_clean_customer_id","historyId":"9de1650d27c6ec3542f2f4c181e4d6ae","time":{"start":1737976829377,"stop":1737976829706,"duration":329},"description":"Test cleaning the 'CUSTOMER_ID' column.","descriptionHtml":"<p>Test cleaning the 'CUSTOMER_ID' column.</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1\n +  where 0 = count()\n +    where count = DataFrame[CUSTOMER_ID: int, customer_name: string, city: string].count\n +      where DataFrame[CUSTOMER_ID: int, customer_name: string, city: string] = filter(Column<'CUSTOMER_ID'> == 1)\n +        where filter = DataFrame[CUSTOMER_ID: int, customer_name: string, city: string].filter\n +        and   Column<'CUSTOMER_ID'> = col('CUSTOMER_ID')","statusTrace":"spark_session = <pyspark.sql.session.SparkSession object at 0x7f3d4a69ae80>\n\n    def test_clean_customer_id(spark_session):\n        \"\"\"Test cleaning the 'CUSTOMER_ID' column.\"\"\"\n        df = spark_session.createDataFrame(\n            [\n                (1.0, \"John Doe\", \"New York\"),\n                (2.0, \"Jane Doe\", \"Chicago\"),\n            ],  # Use valid integers\n            schema=[\"CUSTOMER_ID\", \"customer_name\", \"city\"],\n        )\n        cleaned_df = clean_customer_id(df)\n>       assert cleaned_df.filter(col(\"CUSTOMER_ID\") == 1).count() == 1\nE       AssertionError: assert 0 == 1\nE        +  where 0 = count()\nE        +    where count = DataFrame[CUSTOMER_ID: int, customer_name: string, city: string].count\nE        +      where DataFrame[CUSTOMER_ID: int, customer_name: string, city: string] = filter(Column<'CUSTOMER_ID'> == 1)\nE        +        where filter = DataFrame[CUSTOMER_ID: int, customer_name: string, city: string].filter\nE        +        and   Column<'CUSTOMER_ID'> = col('CUSTOMER_ID')\n\ntest_customers.py:89: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"spark_session","time":{"start":1737976822728,"stop":1737976825403,"duration":2675},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"spark_session::0","time":{"start":1737976830473,"stop":1737976831425,"duration":952},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"suite","value":"test_customers"},{"name":"host","value":"fv-az813-161"},{"name":"thread","value":"2431-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_customers"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"235f177a24751833.json","parameterValues":[]}