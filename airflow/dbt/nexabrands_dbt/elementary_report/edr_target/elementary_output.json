{"creation_time": "2025-02-10T08:30:20+00:00", "days_back": 7, "models": {"model.nexabrands_dbt.check_current_date": {"name": "check_current_date", "unique_id": "model.nexabrands_dbt.check_current_date", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/check_current_date.sql", "meta": {}, "materialization": "view", "database_name": "raw", "schema_name": "raw", "table_name": "check_current_date", "patch_path": null, "model_name": "check_current_date", "normalized_full_path": "nexabrands_dbt/models/check_current_date.sql", "fqn": "raw.raw.check_current_date", "artifact_type": "model"}, "model.nexabrands_dbt.stg_customer_targets": {"name": "stg_customer_targets", "unique_id": "model.nexabrands_dbt.stg_customer_targets", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "Customer performance targets for on-time, in-full, and OTIF metrics.", "full_path": "models/staging/stg_customer_targets.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "patch_path": "nexabrands_dbt://models/staging/stg_customer_targets_schema.yml", "model_name": "stg_customer_targets", "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets.sql", "fqn": "raw.staging.stg_customer_targets", "artifact_type": "model"}, "model.nexabrands_dbt.stg_order_fulfillment": {"name": "stg_order_fulfillment", "unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "Staging table for order fulfillment metrics including on-time and in-full delivery status", "full_path": "models/staging/stg_order_fulfillment.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "patch_path": "nexabrands_dbt://models/staging/stg_order_fulfillment_schema.yml", "model_name": "stg_order_fulfillment", "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment.sql", "fqn": "raw.staging.stg_order_fulfillment", "artifact_type": "model"}, "model.nexabrands_dbt.stg_dates": {"name": "stg_dates", "unique_id": "model.nexabrands_dbt.stg_dates", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "Date dimension table for time-based analysis", "full_path": "models/staging/stg_dates.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "staging", "table_name": "stg_dates", "patch_path": "nexabrands_dbt://models/staging/stg_dates_schema.yml", "model_name": "stg_dates", "normalized_full_path": "nexabrands_dbt/models/staging/stg_dates.sql", "fqn": "raw.staging.stg_dates", "artifact_type": "model"}, "model.nexabrands_dbt.stg_order_lines": {"name": "stg_order_lines", "unique_id": "model.nexabrands_dbt.stg_order_lines", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/staging/stg_order_lines.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_lines", "patch_path": null, "model_name": "stg_order_lines", "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_lines.sql", "fqn": "raw.staging.stg_order_lines", "artifact_type": "model"}, "model.nexabrands_dbt.stg_customers": {"name": "stg_customers", "unique_id": "model.nexabrands_dbt.stg_customers", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "Staging table for customer information including basic details and location", "full_path": "models/staging/stg_customers.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "patch_path": "nexabrands_dbt://models/staging/stg_customers_shema.yml", "model_name": "stg_customers", "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers.sql", "fqn": "raw.staging.stg_customers", "artifact_type": "model"}, "model.nexabrands_dbt.stg_orders": {"name": "stg_orders", "unique_id": "model.nexabrands_dbt.stg_orders", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "Staged order data containing basic order information", "full_path": "models/staging/stg_orders.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "patch_path": "nexabrands_dbt://models/staging/stg_orders_schema.yml", "model_name": "stg_orders", "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders.sql", "fqn": "raw.staging.stg_orders", "artifact_type": "model"}, "model.nexabrands_dbt.stg_products": {"name": "stg_products", "unique_id": "model.nexabrands_dbt.stg_products", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "Staged product data with basic product information", "full_path": "models/staging/stg_products.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "patch_path": "nexabrands_dbt://models/staging/stg_products_schema.yml", "model_name": "stg_products", "normalized_full_path": "nexabrands_dbt/models/staging/stg_products.sql", "fqn": "raw.staging.stg_products", "artifact_type": "model"}, "model.nexabrands_dbt.dim_date": {"name": "dim_date", "unique_id": "model.nexabrands_dbt.dim_date", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/marts/dim_date.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "marts", "table_name": "dim_date", "patch_path": null, "model_name": "dim_date", "normalized_full_path": "nexabrands_dbt/models/marts/dim_date.sql", "fqn": "raw.marts.dim_date", "artifact_type": "model"}, "model.nexabrands_dbt.dim_customer": {"name": "dim_customer", "unique_id": "model.nexabrands_dbt.dim_customer", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/marts/dim_customer.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "marts", "table_name": "dim_customer", "patch_path": null, "model_name": "dim_customer", "normalized_full_path": "nexabrands_dbt/models/marts/dim_customer.sql", "fqn": "raw.marts.dim_customer", "artifact_type": "model"}, "model.nexabrands_dbt.fact_order_fulfillment": {"name": "fact_order_fulfillment", "unique_id": "model.nexabrands_dbt.fact_order_fulfillment", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/marts/fact_order_fulfillment.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "marts", "table_name": "fact_order_fulfillment", "patch_path": null, "model_name": "fact_order_fulfillment", "normalized_full_path": "nexabrands_dbt/models/marts/fact_order_fulfillment.sql", "fqn": "raw.marts.fact_order_fulfillment", "artifact_type": "model"}, "model.nexabrands_dbt.fact_order_lines": {"name": "fact_order_lines", "unique_id": "model.nexabrands_dbt.fact_order_lines", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/marts/fact_order_lines.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "marts", "table_name": "fact_order_lines", "patch_path": null, "model_name": "fact_order_lines", "normalized_full_path": "nexabrands_dbt/models/marts/fact_order_lines.sql", "fqn": "raw.marts.fact_order_lines", "artifact_type": "model"}, "model.nexabrands_dbt.dim_product": {"name": "dim_product", "unique_id": "model.nexabrands_dbt.dim_product", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/marts/dim_product.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "marts", "table_name": "dim_product", "patch_path": null, "model_name": "dim_product", "normalized_full_path": "nexabrands_dbt/models/marts/dim_product.sql", "fqn": "raw.marts.dim_product", "artifact_type": "model"}, "model.nexabrands_dbt.dim_order": {"name": "dim_order", "unique_id": "model.nexabrands_dbt.dim_order", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/marts/dim_order.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "marts", "table_name": "dim_order", "patch_path": null, "model_name": "dim_order", "normalized_full_path": "nexabrands_dbt/models/marts/dim_order.sql", "fqn": "raw.marts.dim_order", "artifact_type": "model"}, "model.nexabrands_dbt.int_order_metrics": {"name": "int_order_metrics", "unique_id": "model.nexabrands_dbt.int_order_metrics", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/intermediate/int_order_metrics.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "intermediate", "table_name": "int_order_metrics", "patch_path": null, "model_name": "int_order_metrics", "normalized_full_path": "nexabrands_dbt/models/intermediate/int_order_metrics.sql", "fqn": "raw.intermediate.int_order_metrics", "artifact_type": "model"}, "model.nexabrands_dbt.int_customer_metrics": {"name": "int_customer_metrics", "unique_id": "model.nexabrands_dbt.int_customer_metrics", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/intermediate/int_customer_metrics.sql", "meta": {}, "materialization": "table", "database_name": "raw", "schema_name": "intermediate", "table_name": "int_customer_metrics", "patch_path": null, "model_name": "int_customer_metrics", "normalized_full_path": "nexabrands_dbt/models/intermediate/int_customer_metrics.sql", "fqn": "raw.intermediate.int_customer_metrics", "artifact_type": "model"}, "source.nexabrands_dbt.raw.customer_targets": {"name": "customer_targets", "unique_id": "source.nexabrands_dbt.raw.customer_targets", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "raw", "database_name": "raw", "schema_name": "raw", "table_name": "customer_targets", "model_name": "customer_targets", "normalized_full_path": "nexabrands_dbt/sources/sources.yml", "fqn": "raw.raw.customer_targets", "artifact_type": "source"}, "source.nexabrands_dbt.raw.date": {"name": "date", "unique_id": "source.nexabrands_dbt.raw.date", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "raw", "database_name": "raw", "schema_name": "raw", "table_name": "dates", "model_name": "date", "normalized_full_path": "nexabrands_dbt/sources/sources.yml", "fqn": "raw.raw.dates", "artifact_type": "source"}, "source.nexabrands_dbt.raw.customers": {"name": "customers", "unique_id": "source.nexabrands_dbt.raw.customers", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "raw", "database_name": "raw", "schema_name": "raw", "table_name": "customers", "model_name": "customers", "normalized_full_path": "nexabrands_dbt/sources/sources.yml", "fqn": "raw.raw.customers", "artifact_type": "source"}, "source.nexabrands_dbt.raw.order_lines": {"name": "order_lines", "unique_id": "source.nexabrands_dbt.raw.order_lines", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "raw", "database_name": "raw", "schema_name": "raw", "table_name": "order_lines", "model_name": "order_lines", "normalized_full_path": "nexabrands_dbt/sources/sources.yml", "fqn": "raw.raw.order_lines", "artifact_type": "source"}, "source.nexabrands_dbt.raw.orders": {"name": "orders", "unique_id": "source.nexabrands_dbt.raw.orders", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "raw", "database_name": "raw", "schema_name": "raw", "table_name": "orders", "model_name": "orders", "normalized_full_path": "nexabrands_dbt/sources/sources.yml", "fqn": "raw.raw.orders", "artifact_type": "source"}, "source.nexabrands_dbt.raw.products": {"name": "products", "unique_id": "source.nexabrands_dbt.raw.products", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "raw", "database_name": "raw", "schema_name": "raw", "table_name": "products", "model_name": "products", "normalized_full_path": "nexabrands_dbt/sources/sources.yml", "fqn": "raw.raw.products", "artifact_type": "source"}, "source.nexabrands_dbt.raw.order_fulfillment": {"name": "order_fulfillment", "unique_id": "source.nexabrands_dbt.raw.order_fulfillment", "owners": [], "tags": [], "package_name": "nexabrands_dbt", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "raw", "database_name": "raw", "schema_name": "raw", "table_name": "order_fulfillment", "model_name": "order_fulfillment", "normalized_full_path": "nexabrands_dbt/sources/sources.yml", "fqn": "raw.raw.order_fulfillment", "artifact_type": "source"}}, "groups": {"dbt": {"nexabrands_dbt": {"models": {"__files__": [{"node_id": "model.nexabrands_dbt.check_current_date", "resource_type": "model"}], "staging": {"__files__": [{"node_id": "model.nexabrands_dbt.stg_customer_targets", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_order_fulfillment", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_dates", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_order_lines", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_customers", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_orders", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_products", "resource_type": "model"}]}, "marts": {"__files__": [{"node_id": "model.nexabrands_dbt.dim_date", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_customer", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.fact_order_fulfillment", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.fact_order_lines", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_product", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_order", "resource_type": "model"}]}, "intermediate": {"__files__": [{"node_id": "model.nexabrands_dbt.int_order_metrics", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.int_customer_metrics", "resource_type": "model"}]}}, "sources": {"__files__": [{"node_id": "source.nexabrands_dbt.raw.customer_targets", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.date", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.customers", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.order_lines", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.orders", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.products", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.order_fulfillment", "resource_type": "source"}]}, "tests": {"__files__": [{"node_id": "test.nexabrands_dbt.test_delivery_quantities_consistency", "resource_type": "test"}, {"node_id": "test.nexabrands_dbt.test_delivery_dates_consistency", "resource_type": "test"}]}}}, "tags": {"No tags": [{"node_id": "model.nexabrands_dbt.check_current_date", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_customer_targets", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_order_fulfillment", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_dates", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_order_lines", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_customers", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_orders", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_products", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_date", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_customer", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.fact_order_fulfillment", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.fact_order_lines", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_product", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_order", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.int_order_metrics", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.int_customer_metrics", "resource_type": "model"}, {"node_id": "source.nexabrands_dbt.raw.customer_targets", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.date", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.customers", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.order_lines", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.orders", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.products", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.order_fulfillment", "resource_type": "source"}, {"node_id": "test.nexabrands_dbt.test_delivery_quantities_consistency", "resource_type": "test"}, {"node_id": "test.nexabrands_dbt.test_delivery_dates_consistency", "resource_type": "test"}]}, "owners": {"No owners": [{"node_id": "model.nexabrands_dbt.check_current_date", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_customer_targets", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_order_fulfillment", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_dates", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_order_lines", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_customers", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_orders", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.stg_products", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_date", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_customer", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.fact_order_fulfillment", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.fact_order_lines", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_product", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.dim_order", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.int_order_metrics", "resource_type": "model"}, {"node_id": "model.nexabrands_dbt.int_customer_metrics", "resource_type": "model"}, {"node_id": "source.nexabrands_dbt.raw.customer_targets", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.date", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.customers", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.order_lines", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.orders", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.products", "resource_type": "source"}, {"node_id": "source.nexabrands_dbt.raw.order_fulfillment", "resource_type": "source"}, {"node_id": "test.nexabrands_dbt.test_delivery_quantities_consistency", "resource_type": "test"}, {"node_id": "test.nexabrands_dbt.test_delivery_dates_consistency", "resource_type": "test"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.nexabrands_dbt.stg_customer_targets": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_infull_target__otif_target__True.5277415478", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_infull_target__otif_target__True.5277415478.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": null, "test_name": "expect_column_pair_values_A_to_be_greater_than_B", "test_display_name": "Expect Column Pair Values A To Be Greater Than B", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  infull_target >= otif_target as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"column_A": "infull_target", "column_B": "otif_target", "or_equal": true, "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  infull_target >= otif_target as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_pair_values_A_to_be_greater_than_B", "test_params": {"column_A": "infull_target", "column_B": "otif_target", "or_equal": true, "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "expect_column_pair_values_A_to_be_greater_than_B", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_ontime_target__otif_target__True.e07a51facc", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_ontime_target__otif_target__True.e07a51facc.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": null, "test_name": "expect_column_pair_values_A_to_be_greater_than_B", "test_display_name": "Expect Column Pair Values A To Be Greater Than B", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  ontime_target >= otif_target as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"column_A": "ontime_target", "column_B": "otif_target", "or_equal": true, "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  ontime_target >= otif_target as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_pair_values_A_to_be_greater_than_B", "test_params": {"column_A": "ontime_target", "column_B": "otif_target", "or_equal": true, "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "expect_column_pair_values_A_to_be_greater_than_B", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_infull_target__100__0.d5824578f5", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_infull_target__100__0.d5824578f5.infull_target.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "infull_target", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and infull_target >= 0 and infull_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "max_value": 100, "column_name": "infull_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and infull_target >= 0 and infull_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": 0, "max_value": 100, "column_name": "infull_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "expect_column_values_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_ontime_target__100__0.41469dcdf6", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_ontime_target__100__0.41469dcdf6.ontime_target.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "ontime_target", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and ontime_target >= 0 and ontime_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "max_value": 100, "column_name": "ontime_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and ontime_target >= 0 and ontime_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": 0, "max_value": 100, "column_name": "ontime_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "expect_column_values_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_otif_target__100__0.20c157cf69", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_otif_target__100__0.20c157cf69.otif_target.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "otif_target", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and otif_target >= 0 and otif_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "max_value": 100, "column_name": "otif_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and otif_target >= 0 and otif_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": 0, "max_value": 100, "column_name": "otif_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "expect_column_values_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_customer_id.528be64241", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_customer_id.528be64241.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_infull_target.848a26f728", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_infull_target.848a26f728.infull_target.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "infull_target", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select infull_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere infull_target is null", "test_params": {"column_name": "infull_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select infull_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere infull_target is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "infull_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_ontime_target.5042478108", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_ontime_target.5042478108.ontime_target.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "ontime_target", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select ontime_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere ontime_target is null", "test_params": {"column_name": "ontime_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select ontime_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere ontime_target is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "ontime_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_otif_target.74d072ca2a", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_otif_target.74d072ca2a.otif_target.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "otif_target", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select otif_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere otif_target is null", "test_params": {"column_name": "otif_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select otif_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere otif_target is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "otif_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.unique_stg_customer_targets_customer_id.eada6988f9", "elementary_unique_id": "test.nexabrands_dbt.unique_stg_customer_targets_customer_id.eada6988f9.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "customer_id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.nexabrands_dbt.stg_customers": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.accepted_values_stg_customers_city__True__Klerksdorp__Polokwane__Stellenbosch__Paarl__East_London__Grahamstown__George__Upington__Bloemfontein__Worcester__Pietermaritzburg__Pretoria__Nelspruit__Kimberley__Johannesburg__Cape_Town.e541883a0e", "elementary_unique_id": "test.nexabrands_dbt.accepted_values_stg_customers_city__True__Klerksdorp__Polokwane__Stellenbosch__Paarl__East_London__Grahamstown__George__Upington__Bloemfontein__Worcester__Pietermaritzburg__Pretoria__Nelspruit__Kimberley__Johannesburg__Cape_Town.e541883a0e.city.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "city", "test_name": "accepted_values", "test_display_name": "Accepted Values", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        city as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    group by city\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Klerksdorp','Polokwane','Stellenbosch','Paarl','East London','Grahamstown','George','Upington','Bloemfontein','Worcester','Pietermaritzburg','Pretoria','Nelspruit','Kimberley','Johannesburg','Cape Town'\n)", "test_params": {"values": ["Klerksdorp", "Polokwane", "Stellenbosch", "Paarl", "East London", "Grahamstown", "George", "Upington", "Bloemfontein", "Worcester", "Pietermaritzburg", "Pretoria", "Nelspruit", "Kimberley", "Johannesburg", "Cape Town"], "quote": true, "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        city as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    group by city\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Klerksdorp','Polokwane','Stellenbosch','Paarl','East London','Grahamstown','George','Upington','Bloemfontein','Worcester','Pietermaritzburg','Pretoria','Nelspruit','Kimberley','Johannesburg','Cape Town'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["Klerksdorp", "Polokwane", "Stellenbosch", "Paarl", "East London", "Grahamstown", "George", "Upington", "Bloemfontein", "Worcester", "Pietermaritzburg", "Pretoria", "Nelspruit", "Kimberley", "Johannesburg", "Cape Town"], "quote": true, "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_city__50__2.75f73ba182", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_city__50__2.75f73ba182.city.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "city", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        city\n    ) >= 2 and length(\n        city\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 2, "max_value": 50, "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        city\n    ) >= 2 and length(\n        city\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 2, "max_value": 50, "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "expect_column_value_lengths_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_customer_name__100__2.862ed945bf", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_customer_name__100__2.862ed945bf.customer_name.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_name", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        customer_name\n    ) >= 2 and length(\n        customer_name\n    ) <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 2, "max_value": 100, "column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        customer_name\n    ) >= 2 and length(\n        customer_name\n    ) <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 2, "max_value": 100, "column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "expect_column_value_lengths_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_customers_city___A_Za_z_s_.0423a3db39", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_customers_city___A_Za_z_s_.0423a3db39.city.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "city", "test_name": "expect_column_values_to_match_regex", "test_display_name": "Expect Column Values To Match Regex", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(city, '^[A-Za-z\\s\\-\\.]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"regex": "^[A-Za-z\\s\\-\\.]+$", "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(city, '^[A-Za-z\\s\\-\\.]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_match_regex", "test_params": {"regex": "^[A-Za-z\\s\\-\\.]+$", "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "expect_column_values_to_match_regex", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_customers_customer_name___A_Za_z0_9_s_.96dd2aa828", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_customers_customer_name___A_Za_z0_9_s_.96dd2aa828.customer_name.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_name", "test_name": "expect_column_values_to_match_regex", "test_display_name": "Expect Column Values To Match Regex", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(customer_name, '^[A-Za-z0-9\\s\\-\\.]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"regex": "^[A-Za-z0-9\\s\\-\\.]+$", "column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(customer_name, '^[A-Za-z0-9\\s\\-\\.]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_match_regex", "test_params": {"regex": "^[A-Za-z0-9\\s\\-\\.]+$", "column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "expect_column_values_to_match_regex", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_customers_customer_id__customer_name__city.68cf07e70d", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_customers_customer_id__customer_name__city.68cf07e70d.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": null, "test_name": "expect_table_columns_to_match_set", "test_display_name": "Expect Table Columns To Match Set", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as relation_column\n        union all\n        \n        select cast('CITY' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as input_column\n        union all\n        \n        select cast('CITY' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "test_params": {"column_list": ["customer_id", "customer_name", "city"], "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as relation_column\n        union all\n        \n        select cast('CITY' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as input_column\n        union all\n        \n        select cast('CITY' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null"}, "configuration": {"test_name": "expect_table_columns_to_match_set", "test_params": {"column_list": ["customer_id", "customer_name", "city"], "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "expect_table_columns_to_match_set", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_customers_40__1.c99103eefc", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_customers_40__1.c99103eefc.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": null, "test_name": "expect_table_row_count_to_be_between", "test_display_name": "Expect Table Row Count To Be Between", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 40\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 40, "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 40\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_table_row_count_to_be_between", "test_params": {"min_value": 1, "max_value": 40, "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "expect_table_row_count_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customers_city.54fe47bfb8", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customers_city.54fe47bfb8.city.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "city", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select city\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere city is null", "test_params": {"column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select city\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere city is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_id.e2cfb1f9aa", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_id.e2cfb1f9aa.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_name.5c92a78a60", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_name.5c92a78a60.customer_name.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_name", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_name\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_name is null", "test_params": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select customer_name\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_name is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.unique_stg_customers_customer_id.c7614daada", "elementary_unique_id": "test.nexabrands_dbt.unique_stg_customers_customer_id.c7614daada.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.nexabrands_dbt.stg_dates": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_equal_stg_dates_date__10.ddb94d6f63", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_equal_stg_dates_date__10.ddb94d6f63.date.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_dates", "column_name": "date", "test_name": "expect_column_value_lengths_to_equal", "test_display_name": "Expect Column Value Lengths To Equal", "original_path": "models/staging/stg_dates_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_dates", "table_unique_id": "raw.staging.stg_dates", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n    length(\n        date\n    ) = 10 as expression\n\n\n    from \"raw\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"value": 10, "column_name": "date", "model": "{{ get_where_subquery(ref('stg_dates')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n    length(\n        date\n    ) = 10 as expression\n\n\n    from \"raw\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_equal", "test_params": {"value": 10, "column_name": "date", "model": "{{ get_where_subquery(ref('stg_dates')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_dates_schema.yml"}, "test_results": {"display_name": "expect_column_value_lengths_to_equal", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_dates_date.2d0c578b06", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_dates_date.2d0c578b06.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_dates", "column_name": null, "test_name": "expect_table_columns_to_match_set", "test_display_name": "Expect Table Columns To Match Set", "original_path": "models/staging/stg_dates_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_dates", "table_unique_id": "raw.staging.stg_dates", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select cast('DATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "test_params": {"column_list": ["date"], "model": "{{ get_where_subquery(ref('stg_dates')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select cast('DATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null"}, "configuration": {"test_name": "expect_table_columns_to_match_set", "test_params": {"column_list": ["date"], "model": "{{ get_where_subquery(ref('stg_dates')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_dates_schema.yml"}, "test_results": {"display_name": "expect_table_columns_to_match_set", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_dates_1.719d3ad97a", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_dates_1.719d3ad97a.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_dates", "column_name": null, "test_name": "expect_table_row_count_to_be_between", "test_display_name": "Expect Table Row Count To Be Between", "original_path": "models/staging/stg_dates_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_dates", "table_unique_id": "raw.staging.stg_dates", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "model": "{{ get_where_subquery(ref('stg_dates')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_table_row_count_to_be_between", "test_params": {"min_value": 1, "model": "{{ get_where_subquery(ref('stg_dates')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_dates_schema.yml"}, "test_results": {"display_name": "expect_table_row_count_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_dates_date.0b6295f5bd", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_dates_date.0b6295f5bd.date.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_dates", "column_name": "date", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_dates_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_dates", "table_unique_id": "raw.staging.stg_dates", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select date\nfrom \"raw\".\"staging\".\"stg_dates\"\nwhere date is null", "test_params": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_dates')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select date\nfrom \"raw\".\"staging\".\"stg_dates\"\nwhere date is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_dates')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_dates_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.nexabrands_dbt.stg_orders": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_customer_id__50__1.4bd54d8012", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_customer_id__50__1.4bd54d8012.customer_id.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "customer_id", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        customer_id\n    ) >= 1 and length(\n        customer_id\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 50, "column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        customer_id\n    ) >= 1 and length(\n        customer_id\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 1, "max_value": 50, "column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "expect_column_value_lengths_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_order_id__50__1.0ecb6709db", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_order_id__50__1.0ecb6709db.order_id.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_id", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        order_id\n    ) >= 1 and length(\n        order_id\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 50, "column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        order_id\n    ) >= 1 and length(\n        order_id\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 1, "max_value": 50, "column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "expect_column_value_lengths_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_orders_order_placement_date__current_date___2024_01_01_.9a31a15386", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_orders_order_placement_date__current_date___2024_01_01_.9a31a15386.order_placement_date.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_placement_date", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_placement_date >= '2024-01-01' and order_placement_date <= current_date\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": "'2024-01-01'", "max_value": "current_date", "column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_placement_date >= '2024-01-01' and order_placement_date <= current_date\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": "'2024-01-01'", "max_value": "current_date", "column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "expect_column_values_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_orders_order_placement_date__date.518b599ba0", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_orders_order_placement_date__date.518b599ba0.order_placement_date.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_placement_date", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_ID' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_PLACEMENT_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "date", "column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_ID' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_PLACEMENT_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "date", "column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_compound_columns_to_be_unique_stg_orders_customer_id__order_placement_date__order_id.c72b454e6a", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_compound_columns_to_be_unique_stg_orders_customer_id__order_placement_date__order_id.c72b454e6a.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": null, "test_name": "expect_compound_columns_to_be_unique", "test_display_name": "Expect Compound Columns To Be Unique", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with validation_errors as (\n\n    select\n        customer_id,order_placement_date,order_id,\n        count(*) as \"n_records\"\n    from \"raw\".\"staging\".\"stg_orders\"\n    where\n        1=1\n        and \n    not (\n        customer_id is null and \n        order_placement_date is null and \n        order_id is null\n        \n    )\n\n\n    \n    group by\n        customer_id,order_placement_date,order_id\n    having count(*) > 1\n\n)\nselect * from validation_errors", "test_params": {"column_list": ["customer_id", "order_placement_date", "order_id"], "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with validation_errors as (\n\n    select\n        customer_id,order_placement_date,order_id,\n        count(*) as \"n_records\"\n    from \"raw\".\"staging\".\"stg_orders\"\n    where\n        1=1\n        and \n    not (\n        customer_id is null and \n        order_placement_date is null and \n        order_id is null\n        \n    )\n\n\n    \n    group by\n        customer_id,order_placement_date,order_id\n    having count(*) > 1\n\n)\nselect * from validation_errors"}, "configuration": {"test_name": "expect_compound_columns_to_be_unique", "test_params": {"column_list": ["customer_id", "order_placement_date", "order_id"], "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "expect_compound_columns_to_be_unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_orders_order_id__customer_id__order_placement_date.26d5dbb404", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_orders_order_id__customer_id__order_placement_date.26d5dbb404.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": null, "test_name": "expect_table_columns_to_match_ordered_list", "test_display_name": "Expect Table Columns To Match Ordered List", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('ORDER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('ORDER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "test_params": {"column_list": ["order_id", "customer_id", "order_placement_date"], "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('ORDER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('ORDER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null"}, "configuration": {"test_name": "expect_table_columns_to_match_ordered_list", "test_params": {"column_list": ["order_id", "customer_id", "order_placement_date"], "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "expect_table_columns_to_match_ordered_list", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_orders_10000000__1.d2cd7717b3", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_orders_10000000__1.d2cd7717b3.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": null, "test_name": "expect_table_row_count_to_be_between", "test_display_name": "Expect Table Row Count To Be Between", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 10000000\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 10000000, "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 10000000\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_table_row_count_to_be_between", "test_params": {"min_value": 1, "max_value": 10000000, "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "expect_table_row_count_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_orders_customer_id.af79d5e4b5", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_orders_customer_id.af79d5e4b5.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_orders\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_orders\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_orders_order_placement_date.b80fa199d8", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_orders_order_placement_date.b80fa199d8.order_placement_date.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_placement_date", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select order_placement_date\nfrom \"raw\".\"staging\".\"stg_orders\"\nwhere order_placement_date is null", "test_params": {"column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select order_placement_date\nfrom \"raw\".\"staging\".\"stg_orders\"\nwhere order_placement_date is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.primary_key_stg_orders_order_id.ff02ba6ab6", "elementary_unique_id": "test.nexabrands_dbt.primary_key_stg_orders_order_id.ff02ba6ab6.order_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_id", "test_name": "primary_key", "test_display_name": "Primary Key", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "WITH validation AS (\n\tSELECT\n\t\torder_id AS primary_key,\n\t\tCOUNT(1) AS occurrences\n\n\tFROM \"raw\".\"staging\".\"stg_orders\"\n\tGROUP BY 1\n)\n\nSELECT *\n\nFROM validation\nWHERE primary_key IS NULL\n\tOR occurrences > 1", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "WITH validation AS (\n\tSELECT\n\t\torder_id AS primary_key,\n\t\tCOUNT(1) AS occurrences\n\n\tFROM \"raw\".\"staging\".\"stg_orders\"\n\tGROUP BY 1\n)\n\nSELECT *\n\nFROM validation\nWHERE primary_key IS NULL\n\tOR occurrences > 1"}, "configuration": {"test_name": "primary_key", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_results": {"display_name": "primary_key", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.nexabrands_dbt.stg_products": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.accepted_values_stg_products_category__Dairy__beverages__Food.9a74aea575", "elementary_unique_id": "test.nexabrands_dbt.accepted_values_stg_products_category__Dairy__beverages__Food.9a74aea575.category.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "category", "test_name": "accepted_values", "test_display_name": "Accepted Values", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        category as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_products\"\n    group by category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Dairy','beverages','Food'\n)", "test_params": {"values": ["Dairy", "beverages", "Food"], "column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        category as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_products\"\n    group by category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Dairy','beverages','Food'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["Dairy", "beverages", "Food"], "column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_products_category__50__2.f036dd83e2", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_products_category__50__2.f036dd83e2.category.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "category", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        category\n    ) >= 2 and length(\n        category\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 2, "max_value": 50, "column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        category\n    ) >= 2 and length(\n        category\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 2, "max_value": 50, "column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "expect_column_value_lengths_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_products_product_name__100__1.2a82c98710", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_products_product_name__100__1.2a82c98710.product_name.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "product_name", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        product_name\n    ) >= 1 and length(\n        product_name\n    ) <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 100, "column_name": "product_name", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        product_name\n    ) >= 1 and length(\n        product_name\n    ) <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 1, "max_value": 100, "column_name": "product_name", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "expect_column_value_lengths_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_products_product_id__1__product_id_IS_NOT_NULL__True.0e54fce5ed", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_products_product_id__1__product_id_IS_NOT_NULL__True.0e54fce5ed.product_id.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "product_id", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and product_id > 1\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    where\n        product_id IS NOT NULL\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "row_condition": "product_id IS NOT NULL", "strictly": true, "column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and product_id > 1\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    where\n        product_id IS NOT NULL\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": 1, "row_condition": "product_id IS NOT NULL", "strictly": true, "column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "expect_column_values_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_in_set_stg_products_category__Dairy__beverages__Food.af6390bd10", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_in_set_stg_products_category__Dairy__beverages__Food.af6390bd10.category.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "category", "test_name": "expect_column_values_to_be_in_set", "test_display_name": "Expect Column Values To Be In Set", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with all_values as (\n\n    select\n        category as value_field\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nset_values as (\n\n    select\n        cast('Dairy' as TEXT) as value_field\n    union all\n    select\n        cast('beverages' as TEXT) as value_field\n    union all\n    select\n        cast('Food' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"value_set": ["Dairy", "beverages", "Food"], "column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        category as value_field\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nset_values as (\n\n    select\n        cast('Dairy' as TEXT) as value_field\n    union all\n    select\n        cast('beverages' as TEXT) as value_field\n    union all\n    select\n        cast('Food' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_in_set", "test_params": {"value_set": ["Dairy", "beverages", "Food"], "column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "expect_column_values_to_be_in_set", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_not_match_regex_stg_products_product_name___s_.11c7940908", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_not_match_regex_stg_products_product_name___s_.11c7940908.product_name.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "product_name", "test_name": "expect_column_values_to_not_match_regex", "test_display_name": "Expect Column Values To Not Match Regex", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(product_name, '^\\\\s*$', '')), 1), 0)\n\n\n = 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"regex": "^\\\\s*$", "column_name": "product_name", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(product_name, '^\\\\s*$', '')), 1), 0)\n\n\n = 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_not_match_regex", "test_params": {"regex": "^\\\\s*$", "column_name": "product_name", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "expect_column_values_to_not_match_regex", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_compound_columns_to_be_unique_stg_products_product_name__category.e804075419", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_compound_columns_to_be_unique_stg_products_product_name__category.e804075419.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": null, "test_name": "expect_compound_columns_to_be_unique", "test_display_name": "Expect Compound Columns To Be Unique", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with validation_errors as (\n\n    select\n        product_name,category,\n        count(*) as \"n_records\"\n    from \"raw\".\"staging\".\"stg_products\"\n    where\n        1=1\n        and \n    not (\n        product_name is null and \n        category is null\n        \n    )\n\n\n    \n    group by\n        product_name,category\n    having count(*) > 1\n\n)\nselect * from validation_errors", "test_params": {"column_list": ["product_name", "category"], "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with validation_errors as (\n\n    select\n        product_name,category,\n        count(*) as \"n_records\"\n    from \"raw\".\"staging\".\"stg_products\"\n    where\n        1=1\n        and \n    not (\n        product_name is null and \n        category is null\n        \n    )\n\n\n    \n    group by\n        product_name,category\n    having count(*) > 1\n\n)\nselect * from validation_errors"}, "configuration": {"test_name": "expect_compound_columns_to_be_unique", "test_params": {"column_list": ["product_name", "category"], "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "expect_compound_columns_to_be_unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_products_product_id__product_name__category.393dada602", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_products_product_id__product_name__category.393dada602.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": null, "test_name": "expect_table_columns_to_match_ordered_list", "test_display_name": "Expect Table Columns To Match Ordered List", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('PRODUCT_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('PRODUCT_NAME' as TEXT) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('CATEGORY' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('PRODUCT_ID' as TEXT) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('PRODUCT_NAME' as TEXT) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('CATEGORY' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "test_params": {"column_list": ["product_id", "product_name", "category"], "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('PRODUCT_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('PRODUCT_NAME' as TEXT) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('CATEGORY' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('PRODUCT_ID' as TEXT) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('PRODUCT_NAME' as TEXT) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('CATEGORY' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null"}, "configuration": {"test_name": "expect_table_columns_to_match_ordered_list", "test_params": {"column_list": ["product_id", "product_name", "category"], "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "expect_table_columns_to_match_ordered_list", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_products_100__1.bd6a3a0191", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_products_100__1.bd6a3a0191.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": null, "test_name": "expect_table_row_count_to_be_between", "test_display_name": "Expect Table Row Count To Be Between", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 100, "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_table_row_count_to_be_between", "test_params": {"min_value": 1, "max_value": 100, "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "expect_table_row_count_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_products_category.6007d8b2d1", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_products_category.6007d8b2d1.category.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "category", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select category\nfrom \"raw\".\"staging\".\"stg_products\"\nwhere category is null", "test_params": {"column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select category\nfrom \"raw\".\"staging\".\"stg_products\"\nwhere category is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_products_product_id.6373b0acf3", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_products_product_id.6373b0acf3.product_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "product_id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select product_id\nfrom \"raw\".\"staging\".\"stg_products\"\nwhere product_id is null", "test_params": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select product_id\nfrom \"raw\".\"staging\".\"stg_products\"\nwhere product_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_products_product_name.0b59e4b939", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_products_product_name.0b59e4b939.product_name.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "product_name", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select product_name\nfrom \"raw\".\"staging\".\"stg_products\"\nwhere product_name is null", "test_params": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select product_name\nfrom \"raw\".\"staging\".\"stg_products\"\nwhere product_name is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.unique_stg_products_product_id.7d950a1467", "elementary_unique_id": "test.nexabrands_dbt.unique_stg_products_product_id.7d950a1467.product_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "product_id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_products\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1", "test_params": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_products\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.nexabrands_dbt.stg_order_fulfillment": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.accepted_values_stg_order_fulfillment_in_full__True__0__1.4b722af630", "elementary_unique_id": "test.nexabrands_dbt.accepted_values_stg_order_fulfillment_in_full__True__0__1.4b722af630.in_full.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": "in_full", "test_name": "accepted_values", "test_display_name": "Accepted Values", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        in_full as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    group by in_full\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)", "test_params": {"values": [0, 1], "quote": true, "column_name": "in_full", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        in_full as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    group by in_full\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": [0, 1], "quote": true, "column_name": "in_full", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.accepted_values_stg_order_fulfillment_ontime_in_full__True__0__1.3b38ec7b73", "elementary_unique_id": "test.nexabrands_dbt.accepted_values_stg_order_fulfillment_ontime_in_full__True__0__1.3b38ec7b73.ontime_in_full.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": "ontime_in_full", "test_name": "accepted_values", "test_display_name": "Accepted Values", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        ontime_in_full as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    group by ontime_in_full\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)", "test_params": {"values": [0, 1], "quote": true, "column_name": "ontime_in_full", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        ontime_in_full as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    group by ontime_in_full\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": [0, 1], "quote": true, "column_name": "ontime_in_full", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.accepted_values_stg_order_fulfillment_on_time__True__0__1.8bc1473d95", "elementary_unique_id": "test.nexabrands_dbt.accepted_values_stg_order_fulfillment_on_time__True__0__1.8bc1473d95.on_time.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": "on_time", "test_name": "accepted_values", "test_display_name": "Accepted Values", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        on_time as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    group by on_time\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)", "test_params": {"values": [0, 1], "quote": true, "column_name": "on_time", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        on_time as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    group by on_time\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": [0, 1], "quote": true, "column_name": "on_time", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_order_fulfillment_order_id___A_Za_z0_9___.2da099af86", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_order_fulfillment_order_id___A_Za_z0_9___.2da099af86.order_id.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": "order_id", "test_name": "expect_column_values_to_match_regex", "test_display_name": "Expect Column Values To Match Regex", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(order_id, '^[A-Za-z0-9\\-_]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"regex": "^[A-Za-z0-9\\-_]+$", "column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(order_id, '^[A-Za-z0-9\\-_]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_match_regex", "test_params": {"regex": "^[A-Za-z0-9\\-_]+$", "column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "expect_column_values_to_match_regex", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_order_fulfillment_order_id__on_time__in_full__ontime_in_full.4d470eb185", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_order_fulfillment_order_id__on_time__in_full__ontime_in_full.4d470eb185.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": null, "test_name": "expect_table_columns_to_match_set", "test_display_name": "Expect Table Columns To Match Set", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select cast('ORDER_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('ON_TIME' as TEXT) as relation_column\n        union all\n        \n        select cast('IN_FULL' as TEXT) as relation_column\n        union all\n        \n        select cast('ONTIME_IN_FULL' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('ORDER_ID' as TEXT) as input_column\n        union all\n        \n        select cast('ON_TIME' as TEXT) as input_column\n        union all\n        \n        select cast('IN_FULL' as TEXT) as input_column\n        union all\n        \n        select cast('ONTIME_IN_FULL' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "test_params": {"column_list": ["order_id", "on_time", "in_full", "ontime_in_full"], "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select cast('ORDER_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('ON_TIME' as TEXT) as relation_column\n        union all\n        \n        select cast('IN_FULL' as TEXT) as relation_column\n        union all\n        \n        select cast('ONTIME_IN_FULL' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('ORDER_ID' as TEXT) as input_column\n        union all\n        \n        select cast('ON_TIME' as TEXT) as input_column\n        union all\n        \n        select cast('IN_FULL' as TEXT) as input_column\n        union all\n        \n        select cast('ONTIME_IN_FULL' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null"}, "configuration": {"test_name": "expect_table_columns_to_match_set", "test_params": {"column_list": ["order_id", "on_time", "in_full", "ontime_in_full"], "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "expect_table_columns_to_match_set", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_order_fulfillment_1.0283bc6212", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_order_fulfillment_1.0283bc6212.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": null, "test_name": "expect_table_row_count_to_be_between", "test_display_name": "Expect Table Row Count To Be Between", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_order_fulfillment\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_table_row_count_to_be_between", "test_params": {"min_value": 1, "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "expect_table_row_count_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_order_fulfillment_in_full.7f52ec5fb8", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_order_fulfillment_in_full.7f52ec5fb8.in_full.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": "in_full", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select in_full\nfrom \"raw\".\"staging\".\"stg_order_fulfillment\"\nwhere in_full is null", "test_params": {"column_name": "in_full", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select in_full\nfrom \"raw\".\"staging\".\"stg_order_fulfillment\"\nwhere in_full is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "in_full", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_order_fulfillment_on_time.cb8d53a996", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_order_fulfillment_on_time.cb8d53a996.on_time.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": "on_time", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select on_time\nfrom \"raw\".\"staging\".\"stg_order_fulfillment\"\nwhere on_time is null", "test_params": {"column_name": "on_time", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select on_time\nfrom \"raw\".\"staging\".\"stg_order_fulfillment\"\nwhere on_time is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "on_time", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_order_fulfillment_ontime_in_full.d8e8bdce2a", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_order_fulfillment_ontime_in_full.d8e8bdce2a.ontime_in_full.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": "ontime_in_full", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select ontime_in_full\nfrom \"raw\".\"staging\".\"stg_order_fulfillment\"\nwhere ontime_in_full is null", "test_params": {"column_name": "ontime_in_full", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select ontime_in_full\nfrom \"raw\".\"staging\".\"stg_order_fulfillment\"\nwhere ontime_in_full is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "ontime_in_full", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.primary_key_stg_order_fulfillment_order_id.bfcd37ee63", "elementary_unique_id": "test.nexabrands_dbt.primary_key_stg_order_fulfillment_order_id.bfcd37ee63.order_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_order_fulfillment", "column_name": "order_id", "test_name": "primary_key", "test_display_name": "Primary Key", "original_path": "models/staging/stg_order_fulfillment_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "table_unique_id": "raw.staging.stg_order_fulfillment", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "WITH validation AS (\n\tSELECT\n\t\torder_id AS primary_key,\n\t\tCOUNT(1) AS occurrences\n\n\tFROM \"raw\".\"staging\".\"stg_order_fulfillment\"\n\tGROUP BY 1\n)\n\nSELECT *\n\nFROM validation\nWHERE primary_key IS NULL\n\tOR occurrences > 1", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "WITH validation AS (\n\tSELECT\n\t\torder_id AS primary_key,\n\t\tCOUNT(1) AS occurrences\n\n\tFROM \"raw\".\"staging\".\"stg_order_fulfillment\"\n\tGROUP BY 1\n)\n\nSELECT *\n\nFROM validation\nWHERE primary_key IS NULL\n\tOR occurrences > 1"}, "configuration": {"test_name": "primary_key", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_order_fulfillment')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_order_fulfillment_schema.yml"}, "test_results": {"display_name": "primary_key", "results_sample": null, "error_message": null, "failed_rows_count": -1}}]}, "test_results_totals": {"model.nexabrands_dbt.stg_customer_targets": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "model.nexabrands_dbt.stg_customers": {"errors": 0, "warnings": 0, "passed": 11, "failures": 0}, "model.nexabrands_dbt.stg_dates": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "model.nexabrands_dbt.stg_orders": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "model.nexabrands_dbt.stg_products": {"errors": 0, "warnings": 0, "passed": 13, "failures": 0}, "model.nexabrands_dbt.stg_order_fulfillment": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}}, "test_runs": {"model.nexabrands_dbt.stg_customer_targets": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_infull_target__otif_target__True.5277415478", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_infull_target__otif_target__True.5277415478.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": null, "test_name": "expect_column_pair_values_A_to_be_greater_than_B", "test_display_name": "Expect Column Pair Values A To Be Greater Than B", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  infull_target >= otif_target as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"column_A": "infull_target", "column_B": "otif_target", "or_equal": true, "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  infull_target >= otif_target as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_pair_values_A_to_be_greater_than_B", "test_params": {"column_A": "infull_target", "column_B": "otif_target", "or_equal": true, "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.2043476104736328}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.28549838066101074}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.09724855422973633}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.08758854866027832}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.15079808235168457, "last_exec_time": 0.08758854866027832}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_ontime_target__otif_target__True.e07a51facc", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_ontime_target__otif_target__True.e07a51facc.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": null, "test_name": "expect_column_pair_values_A_to_be_greater_than_B", "test_display_name": "Expect Column Pair Values A To Be Greater Than B", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  ontime_target >= otif_target as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"column_A": "ontime_target", "column_B": "otif_target", "or_equal": true, "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  ontime_target >= otif_target as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_pair_values_A_to_be_greater_than_B", "test_params": {"column_A": "ontime_target", "column_B": "otif_target", "or_equal": true, "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.20672178268432617}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.2525746822357178}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.10427260398864746}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.10609173774719238}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.15640676021575928, "last_exec_time": 0.10609173774719238}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_infull_target__100__0.d5824578f5", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_infull_target__100__0.d5824578f5.infull_target.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "infull_target", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and infull_target >= 0 and infull_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "max_value": 100, "column_name": "infull_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and infull_target >= 0 and infull_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": 0, "max_value": 100, "column_name": "infull_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.12553763389587402}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.09181976318359375}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.09128952026367188}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.10561513900756836}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.09871745109558105, "last_exec_time": 0.10561513900756836}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_ontime_target__100__0.41469dcdf6", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_ontime_target__100__0.41469dcdf6.ontime_target.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "ontime_target", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and ontime_target >= 0 and ontime_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "max_value": 100, "column_name": "ontime_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and ontime_target >= 0 and ontime_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": 0, "max_value": 100, "column_name": "ontime_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.0986943244934082}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.09109163284301758}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.07406926155090332}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.09456992149353027}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.09283077716827393, "last_exec_time": 0.09456992149353027}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_otif_target__100__0.20c157cf69", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_otif_target__100__0.20c157cf69.otif_target.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "otif_target", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and otif_target >= 0 and otif_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 0, "max_value": 100, "column_name": "otif_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and otif_target >= 0 and otif_target <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": 0, "max_value": 100, "column_name": "otif_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.12886261940002441}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.09921455383300781}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.09975457191467285}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.08646774291992188}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.09948456287384033, "last_exec_time": 0.08646774291992188}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_customer_id.528be64241", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_customer_id.528be64241.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.1129155158996582}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.08690762519836426}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.09041404724121094}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.09245681762695312}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.09143543243408203, "last_exec_time": 0.09245681762695312}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_infull_target.848a26f728", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_infull_target.848a26f728.infull_target.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "infull_target", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select infull_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere infull_target is null", "test_params": {"column_name": "infull_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select infull_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere infull_target is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "infull_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.0996091365814209}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.09685492515563965}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.08613133430480957}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.1111140251159668}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.09823203086853027, "last_exec_time": 0.1111140251159668}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_ontime_target.5042478108", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_ontime_target.5042478108.ontime_target.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "ontime_target", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select ontime_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere ontime_target is null", "test_params": {"column_name": "ontime_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select ontime_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere ontime_target is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "ontime_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.11877059936523438}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.098602294921875}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.10265588760375977}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.08086442947387695}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.10062909126281738, "last_exec_time": 0.08086442947387695}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_otif_target.74d072ca2a", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_otif_target.74d072ca2a.otif_target.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "otif_target", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select otif_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere otif_target is null", "test_params": {"column_name": "otif_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select otif_target\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere otif_target is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "otif_target", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.11249566078186035}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.08622479438781738}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.08631610870361328}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.0940999984741211}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.09020805358886719, "last_exec_time": 0.0940999984741211}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.unique_stg_customer_targets_customer_id.eada6988f9", "elementary_unique_id": "test.nexabrands_dbt.unique_stg_customer_targets_customer_id.eada6988f9.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customer_targets", "column_name": "customer_id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/staging/stg_customer_targets_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customer_targets", "table_unique_id": "raw.staging.stg_customer_targets", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer_targets')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customer_targets_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.11290502548217773}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.11452889442443848}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.10632967948913574}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.11508941650390625}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.1137169599533081, "last_exec_time": 0.11508941650390625}], "model.nexabrands_dbt.stg_customers": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.accepted_values_stg_customers_city__True__Klerksdorp__Polokwane__Stellenbosch__Paarl__East_London__Grahamstown__George__Upington__Bloemfontein__Worcester__Pietermaritzburg__Pretoria__Nelspruit__Kimberley__Johannesburg__Cape_Town.e541883a0e", "elementary_unique_id": "test.nexabrands_dbt.accepted_values_stg_customers_city__True__Klerksdorp__Polokwane__Stellenbosch__Paarl__East_London__Grahamstown__George__Upington__Bloemfontein__Worcester__Pietermaritzburg__Pretoria__Nelspruit__Kimberley__Johannesburg__Cape_Town.e541883a0e.city.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "city", "test_name": "accepted_values", "test_display_name": "Accepted Values", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        city as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    group by city\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Klerksdorp','Polokwane','Stellenbosch','Paarl','East London','Grahamstown','George','Upington','Bloemfontein','Worcester','Pietermaritzburg','Pretoria','Nelspruit','Kimberley','Johannesburg','Cape Town'\n)", "test_params": {"values": ["Klerksdorp", "Polokwane", "Stellenbosch", "Paarl", "East London", "Grahamstown", "George", "Upington", "Bloemfontein", "Worcester", "Pietermaritzburg", "Pretoria", "Nelspruit", "Kimberley", "Johannesburg", "Cape Town"], "quote": true, "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        city as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    group by city\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Klerksdorp','Polokwane','Stellenbosch','Paarl','East London','Grahamstown','George','Upington','Bloemfontein','Worcester','Pietermaritzburg','Pretoria','Nelspruit','Kimberley','Johannesburg','Cape Town'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["Klerksdorp", "Polokwane", "Stellenbosch", "Paarl", "East London", "Grahamstown", "George", "Upington", "Bloemfontein", "Worcester", "Pietermaritzburg", "Pretoria", "Nelspruit", "Kimberley", "Johannesburg", "Cape Town"], "quote": true, "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.08487510681152344}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.2494187355041504}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.12299323081970215}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.15406274795532227}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.1385279893875122, "last_exec_time": 0.15406274795532227}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_city__50__2.75f73ba182", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_city__50__2.75f73ba182.city.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "city", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        city\n    ) >= 2 and length(\n        city\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 2, "max_value": 50, "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        city\n    ) >= 2 and length(\n        city\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 2, "max_value": 50, "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.1035606861114502}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.2803006172180176}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.08727717399597168}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.11311531066894531}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.10833799839019775, "last_exec_time": 0.11311531066894531}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_customer_name__100__2.862ed945bf", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_customer_name__100__2.862ed945bf.customer_name.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_name", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        customer_name\n    ) >= 2 and length(\n        customer_name\n    ) <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 2, "max_value": 100, "column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        customer_name\n    ) >= 2 and length(\n        customer_name\n    ) <= 100\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 2, "max_value": 100, "column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.10865950584411621}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.1292412281036377}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.09515953063964844}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.12514090538024902}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.11690020561218262, "last_exec_time": 0.12514090538024902}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_customers_city___A_Za_z_s_.0423a3db39", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_customers_city___A_Za_z_s_.0423a3db39.city.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "city", "test_name": "expect_column_values_to_match_regex", "test_display_name": "Expect Column Values To Match Regex", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(city, '^[A-Za-z\\s\\-\\.]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"regex": "^[A-Za-z\\s\\-\\.]+$", "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(city, '^[A-Za-z\\s\\-\\.]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_match_regex", "test_params": {"regex": "^[A-Za-z\\s\\-\\.]+$", "column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.1074228286743164}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.17353010177612305}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.18923449516296387}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.18517017364501953}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.1793501377105713, "last_exec_time": 0.18517017364501953}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_customers_customer_name___A_Za_z0_9_s_.96dd2aa828", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_match_regex_stg_customers_customer_name___A_Za_z0_9_s_.96dd2aa828.customer_name.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_name", "test_name": "expect_column_values_to_match_regex", "test_display_name": "Expect Column Values To Match Regex", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(customer_name, '^[A-Za-z0-9\\s\\-\\.]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"regex": "^[A-Za-z0-9\\s\\-\\.]+$", "column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\ncoalesce(array_length((select regexp_matches(customer_name, '^[A-Za-z0-9\\s\\-\\.]+$', '')), 1), 0)\n\n\n > 0\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_match_regex", "test_params": {"regex": "^[A-Za-z0-9\\s\\-\\.]+$", "column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.12045526504516602}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.1417088508605957}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.20799660682678223}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.16227102279663086}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.15198993682861328, "last_exec_time": 0.16227102279663086}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_customers_customer_id__customer_name__city.68cf07e70d", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_customers_customer_id__customer_name__city.68cf07e70d.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": null, "test_name": "expect_table_columns_to_match_set", "test_display_name": "Expect Table Columns To Match Set", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as relation_column\n        union all\n        \n        select cast('CITY' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as input_column\n        union all\n        \n        select cast('CITY' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "test_params": {"column_list": ["customer_id", "customer_name", "city"], "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as relation_column\n        union all\n        \n        select cast('CITY' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as input_column\n        union all\n        \n        select cast('CITY' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null"}, "configuration": {"test_name": "expect_table_columns_to_match_set", "test_params": {"column_list": ["customer_id", "customer_name", "city"], "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.13118982315063477}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.18840432167053223}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.1389462947845459}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.1483762264251709}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.1436612606048584, "last_exec_time": 0.1483762264251709}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_customers_40__1.c99103eefc", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_customers_40__1.c99103eefc.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": null, "test_name": "expect_table_row_count_to_be_between", "test_display_name": "Expect Table Row Count To Be Between", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 40\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 40, "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 40\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_table_row_count_to_be_between", "test_params": {"min_value": 1, "max_value": 40, "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.0966951847076416}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.0882716178894043}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.09980964660644531}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.12625503540039062}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.09825241565704346, "last_exec_time": 0.12625503540039062}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customers_city.54fe47bfb8", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customers_city.54fe47bfb8.city.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "city", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select city\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere city is null", "test_params": {"column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select city\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere city is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "city", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.09760141372680664}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.08574986457824707}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.07047271728515625}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.1683344841003418}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.09167563915252686, "last_exec_time": 0.1683344841003418}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_id.e2cfb1f9aa", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_id.e2cfb1f9aa.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.06883668899536133}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.06857943534851074}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.15541505813598633}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.18516159057617188}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.11212587356567383, "last_exec_time": 0.18516159057617188}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_name.5c92a78a60", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_name.5c92a78a60.customer_name.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_name", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_name\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_name is null", "test_params": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select customer_name\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_name is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.07723474502563477}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.1655254364013672}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.14544677734375}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.18859577178955078}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.1554861068725586, "last_exec_time": 0.18859577178955078}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.unique_stg_customers_customer_id.c7614daada", "elementary_unique_id": "test.nexabrands_dbt.unique_stg_customers_customer_id.c7614daada.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_customers", "column_name": "customer_id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/staging/stg_customers_shema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_customers", "table_unique_id": "raw.staging.stg_customers", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"raw\".\"staging\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_customers_shema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.10053133964538574}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.0648195743560791}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:33+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.07216143608093262}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.07385540008544922}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.07300841808319092, "last_exec_time": 0.07385540008544922}], "model.nexabrands_dbt.stg_dates": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_equal_stg_dates_date__10.ddb94d6f63", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_equal_stg_dates_date__10.ddb94d6f63.date.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_dates", "column_name": "date", "test_name": "expect_column_value_lengths_to_equal", "test_display_name": "Expect Column Value Lengths To Equal", "original_path": "models/staging/stg_dates_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_dates", "table_unique_id": "raw.staging.stg_dates", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n    length(\n        date\n    ) = 10 as expression\n\n\n    from \"raw\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"value": 10, "column_name": "date", "model": "{{ get_where_subquery(ref('stg_dates')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n    length(\n        date\n    ) = 10 as expression\n\n\n    from \"raw\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_equal", "test_params": {"value": 10, "column_name": "date", "model": "{{ get_where_subquery(ref('stg_dates')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_dates_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.09139776229858398}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.13317656517028809}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.09691095352172852}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.10479950904846191}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.10085523128509521, "last_exec_time": 0.10479950904846191}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_dates_date.2d0c578b06", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_dates_date.2d0c578b06.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_dates", "column_name": null, "test_name": "expect_table_columns_to_match_set", "test_display_name": "Expect Table Columns To Match Set", "original_path": "models/staging/stg_dates_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_dates", "table_unique_id": "raw.staging.stg_dates", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select cast('DATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "test_params": {"column_list": ["date"], "model": "{{ get_where_subquery(ref('stg_dates')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select cast('DATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null"}, "configuration": {"test_name": "expect_table_columns_to_match_set", "test_params": {"column_list": ["date"], "model": "{{ get_where_subquery(ref('stg_dates')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_dates_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.2003028392791748}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.179887056350708}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.16204428672790527}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.13579416275024414}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.17096567153930664, "last_exec_time": 0.13579416275024414}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_dates_1.719d3ad97a", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_dates_1.719d3ad97a.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_dates", "column_name": null, "test_name": "expect_table_row_count_to_be_between", "test_display_name": "Expect Table Row Count To Be Between", "original_path": "models/staging/stg_dates_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_dates", "table_unique_id": "raw.staging.stg_dates", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "model": "{{ get_where_subquery(ref('stg_dates')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_table_row_count_to_be_between", "test_params": {"min_value": 1, "model": "{{ get_where_subquery(ref('stg_dates')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_dates_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.15218710899353027}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.09933757781982422}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.10670971870422363}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.10314798355102539}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.10492885112762451, "last_exec_time": 0.10314798355102539}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_dates_date.0b6295f5bd", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_dates_date.0b6295f5bd.date.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_dates", "column_name": "date", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_dates_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_dates", "table_unique_id": "raw.staging.stg_dates", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select date\nfrom \"raw\".\"staging\".\"stg_dates\"\nwhere date is null", "test_params": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_dates')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select date\nfrom \"raw\".\"staging\".\"stg_dates\"\nwhere date is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_dates')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_dates_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.17015647888183594}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.09505295753479004}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.13549256324768066}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.15857791900634766}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.14703524112701416, "last_exec_time": 0.15857791900634766}], "model.nexabrands_dbt.stg_orders": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_customer_id__50__1.4bd54d8012", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_customer_id__50__1.4bd54d8012.customer_id.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "customer_id", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        customer_id\n    ) >= 1 and length(\n        customer_id\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 50, "column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        customer_id\n    ) >= 1 and length(\n        customer_id\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 1, "max_value": 50, "column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.12677288055419922}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.1571953296661377}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.12800836563110352}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.1275935173034668}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.12780094146728516, "last_exec_time": 0.1275935173034668}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_order_id__50__1.0ecb6709db", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_order_id__50__1.0ecb6709db.order_id.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_id", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        order_id\n    ) >= 1 and length(\n        order_id\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 50, "column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        order_id\n    ) >= 1 and length(\n        order_id\n    ) <= 50\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_value_lengths_to_be_between", "test_params": {"min_value": 1, "max_value": 50, "column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.11819124221801758}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.14963293075561523}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.13932442665100098}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.11736249923706055}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.12875783443450928, "last_exec_time": 0.11736249923706055}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_orders_order_placement_date__current_date___2024_01_01_.9a31a15386", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_orders_order_placement_date__current_date___2024_01_01_.9a31a15386.order_placement_date.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_placement_date", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_placement_date >= '2024-01-01' and order_placement_date <= current_date\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": "'2024-01-01'", "max_value": "current_date", "column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_placement_date >= '2024-01-01' and order_placement_date <= current_date\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": "'2024-01-01'", "max_value": "current_date", "column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.14307832717895508}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.10256743431091309}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.10466718673706055}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.12401127815246582}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.11433923244476318, "last_exec_time": 0.12401127815246582}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_orders_order_placement_date__date.518b599ba0", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_orders_order_placement_date__date.518b599ba0.order_placement_date.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_placement_date", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_ID' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_PLACEMENT_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "date", "column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_ID' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_PLACEMENT_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "date", "column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.21429181098937988}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.2049717903137207}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.2398233413696289}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.23244094848632812}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.223366379737854, "last_exec_time": 0.23244094848632812}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_compound_columns_to_be_unique_stg_orders_customer_id__order_placement_date__order_id.c72b454e6a", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_compound_columns_to_be_unique_stg_orders_customer_id__order_placement_date__order_id.c72b454e6a.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": null, "test_name": "expect_compound_columns_to_be_unique", "test_display_name": "Expect Compound Columns To Be Unique", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with validation_errors as (\n\n    select\n        customer_id,order_placement_date,order_id,\n        count(*) as \"n_records\"\n    from \"raw\".\"staging\".\"stg_orders\"\n    where\n        1=1\n        and \n    not (\n        customer_id is null and \n        order_placement_date is null and \n        order_id is null\n        \n    )\n\n\n    \n    group by\n        customer_id,order_placement_date,order_id\n    having count(*) > 1\n\n)\nselect * from validation_errors", "test_params": {"column_list": ["customer_id", "order_placement_date", "order_id"], "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with validation_errors as (\n\n    select\n        customer_id,order_placement_date,order_id,\n        count(*) as \"n_records\"\n    from \"raw\".\"staging\".\"stg_orders\"\n    where\n        1=1\n        and \n    not (\n        customer_id is null and \n        order_placement_date is null and \n        order_id is null\n        \n    )\n\n\n    \n    group by\n        customer_id,order_placement_date,order_id\n    having count(*) > 1\n\n)\nselect * from validation_errors"}, "configuration": {"test_name": "expect_compound_columns_to_be_unique", "test_params": {"column_list": ["customer_id", "order_placement_date", "order_id"], "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.19400691986083984}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.1855769157409668}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.20351362228393555}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.22820663452148438}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.1987602710723877, "last_exec_time": 0.22820663452148438}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_orders_order_id__customer_id__order_placement_date.26d5dbb404", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_orders_order_id__customer_id__order_placement_date.26d5dbb404.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": null, "test_name": "expect_table_columns_to_match_ordered_list", "test_display_name": "Expect Table Columns To Match Ordered List", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('ORDER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('ORDER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "test_params": {"column_list": ["order_id", "customer_id", "order_placement_date"], "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('ORDER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('ORDER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null"}, "configuration": {"test_name": "expect_table_columns_to_match_ordered_list", "test_params": {"column_list": ["order_id", "customer_id", "order_placement_date"], "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.1236879825592041}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.2193775177001953}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.17710137367248535}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.14769649505615234}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.16239893436431885, "last_exec_time": 0.14769649505615234}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_orders_10000000__1.d2cd7717b3", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_orders_10000000__1.d2cd7717b3.None.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": null, "test_name": "expect_table_row_count_to_be_between", "test_display_name": "Expect Table Row Count To Be Between", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 10000000\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 1, "max_value": 10000000, "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 10000000\n)\n as expression\n\n\n    from \"raw\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_table_row_count_to_be_between", "test_params": {"min_value": 1, "max_value": 10000000, "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.09273147583007812}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.09067463874816895}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.10004663467407227}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.0948176383972168}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.09377455711364746, "last_exec_time": 0.0948176383972168}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_orders_customer_id.af79d5e4b5", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_orders_customer_id.af79d5e4b5.customer_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "customer_id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_orders\"\nwhere customer_id is null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select customer_id\nfrom \"raw\".\"staging\".\"stg_orders\"\nwhere customer_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.11079645156860352}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.11687326431274414}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.09392571449279785}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.10504913330078125}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.10792279243469238, "last_exec_time": 0.10504913330078125}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.not_null_stg_orders_order_placement_date.b80fa199d8", "elementary_unique_id": "test.nexabrands_dbt.not_null_stg_orders_order_placement_date.b80fa199d8.order_placement_date.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_placement_date", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select order_placement_date\nfrom \"raw\".\"staging\".\"stg_orders\"\nwhere order_placement_date is null", "test_params": {"column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "select order_placement_date\nfrom \"raw\".\"staging\".\"stg_orders\"\nwhere order_placement_date is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "order_placement_date", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.09269022941589355}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.09511637687683105}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.09645271301269531}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.09016561508178711}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.0939033031463623, "last_exec_time": 0.09016561508178711}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.primary_key_stg_orders_order_id.ff02ba6ab6", "elementary_unique_id": "test.nexabrands_dbt.primary_key_stg_orders_order_id.ff02ba6ab6.order_id.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_orders", "column_name": "order_id", "test_name": "primary_key", "test_display_name": "Primary Key", "original_path": "models/staging/stg_orders_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_orders", "table_unique_id": "raw.staging.stg_orders", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "WITH validation AS (\n\tSELECT\n\t\torder_id AS primary_key,\n\t\tCOUNT(1) AS occurrences\n\n\tFROM \"raw\".\"staging\".\"stg_orders\"\n\tGROUP BY 1\n)\n\nSELECT *\n\nFROM validation\nWHERE primary_key IS NULL\n\tOR occurrences > 1", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "WITH validation AS (\n\tSELECT\n\t\torder_id AS primary_key,\n\t\tCOUNT(1) AS occurrences\n\n\tFROM \"raw\".\"staging\".\"stg_orders\"\n\tGROUP BY 1\n)\n\nSELECT *\n\nFROM validation\nWHERE primary_key IS NULL\n\tOR occurrences > 1"}, "configuration": {"test_name": "primary_key", "test_params": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_orders_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.14333271980285645}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:54+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.11712932586669922}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.11237406730651855}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.16258597373962402}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.13023102283477783, "last_exec_time": 0.16258597373962402}], "model.nexabrands_dbt.stg_products": [{"metadata": {"test_unique_id": "test.nexabrands_dbt.accepted_values_stg_products_category__Dairy__beverages__Food.9a74aea575", "elementary_unique_id": "test.nexabrands_dbt.accepted_values_stg_products_category__Dairy__beverages__Food.9a74aea575.category.generic", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "category", "test_name": "accepted_values", "test_display_name": "Accepted Values", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:00", "latest_run_status": "pass", "model_unique_id": "model.nexabrands_dbt.stg_products", "table_unique_id": "raw.staging.stg_products", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        category as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_products\"\n    group by category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Dairy','beverages','Food'\n)", "test_params": {"values": ["Dairy", "beverages", "Food"], "column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        category as value_field,\n        count(*) as n_records\n\n    from \"raw\".\"staging\".\"stg_products\"\n    group by category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Dairy','beverages','Food'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["Dairy", "beverages", "Food"], "column_name": "category", "model": "{{ get_where_subquery(ref('stg_products')) }}"}}, "test_tags": [], "normalized_full_path": "nexabrands_dbt/models/staging/stg_products_schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2025-02-10T07:37:10+00:00", "id": "fe3634fa-33ae-45e1-8b02-4af4aa2dba40", "status": "pass", "execution_time": 0.25613951683044434}, {"affected_rows": null, "time_utc": "2025-02-10T07:38:53+00:00", "id": "dbde1031-956a-4095-8984-0724ea97f3db", "status": "pass", "execution_time": 0.23155498504638672}, {"affected_rows": null, "time_utc": "2025-02-10T08:12:32+00:00", "id": "d3187496-7f8e-42c7-87d1-98769ce72362", "status": "pass", "execution_time": 0.12032461166381836}, {"affected_rows": null, "time_utc": "2025-02-10T08:22:52+00:00", "id": "3c424830-880f-4b0f-9396-c3739c387fea", "status": "pass", "execution_time": 0.1362152099609375}], "description": "There were no failures, no errors and no warnings on the last 4 test runs."}, "median_exec_time": 0.1838850975036621, "last_exec_time": 0.1362152099609375}, {"metadata": {"test_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_products_category__50__2.f036dd83e2", "elementary_unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_products_category__50__2.f036dd83e2.category.expectation", "database_name": "raw", "schema_name": "staging", "table_name": "stg_products", "column_name": "category", "test_name": "expect_column_value_lengths_to_be_between", "test_display_name": "Expect Column Value Lengths To Be Between", "original_path": "models/staging/stg_products_schema.yml", "latest_run_time": "2025-02-10T08:22:52+00:00", "latest_run_time_utc": "2025-02-10T08:22:52+00:0