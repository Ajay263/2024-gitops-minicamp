{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.3", "generated_at": "2025-04-09T16:48:44.896902Z", "invocation_id": "ddb52b29-942f-4825-a310-6c1c55d76162", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:36.694841Z", "completed_at": "2025-04-09T16:48:36.714114Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:36.715239Z", "completed_at": "2025-04-09T16:48:36.715269Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022576332092285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.data_monitoring_metrics", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n    \n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_type\n\n,\n                \n        cast(123456789.99 as float) as metric_value\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as source_value\n\n,\n                cast('2091-02-17' as timestamp) as bucket_start\n\n,\n                cast('2091-02-17' as timestamp) as bucket_end\n\n,\n                \n        cast(123456789 as integer) as bucket_duration_hours\n\n,\n                cast('2091-02-17' as timestamp) as updated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dimension\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dimension_value\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metric_properties\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"data_monitoring_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:36.719119Z", "completed_at": "2025-04-09T16:48:36.734687Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:36.735310Z", "completed_at": "2025-04-09T16:48:36.735329Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018294572830200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_columns", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as parent_unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as table_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as resource_type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:36.739068Z", "completed_at": "2025-04-09T16:48:36.757113Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:36.757824Z", "completed_at": "2025-04-09T16:48:36.757836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02041006088256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_exposures", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as maturity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner_email\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as url\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_columns\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as label\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as raw_queries\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_exposures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:36.761013Z", "completed_at": "2025-04-09T16:48:36.782207Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:36.783125Z", "completed_at": "2025-04-09T16:48:36.783137Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023951292037963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_invocations", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as invocation_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as job_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as job_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as job_run_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as run_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as run_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as command\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dbt_version\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as elementary_version\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as invocation_vars\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as vars\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_database\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_schema\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as target_profile_name\n\n,\n                \n        cast(123456789 as integer) as threads\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as selected\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as yaml_selector\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as project_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as project_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as env\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as env_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as cause_category\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as cause\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as pull_request_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as git_sha\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as orchestrator\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as dbt_user\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as job_url\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as job_run_url\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as account_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as target_adapter_specific_fields\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_invocations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:36.786871Z", "completed_at": "2025-04-09T16:48:36.831093Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:36.833116Z", "completed_at": "2025-04-09T16:48:36.833130Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04805111885070801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_metrics", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as label\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as model\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as sql\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as timestamp\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as filters\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as time_grains\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as dimensions\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:36.839670Z", "completed_at": "2025-04-09T16:48:36.860222Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:36.861333Z", "completed_at": "2025-04-09T16:48:36.861346Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024602890014648438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_models", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as unique_key\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as incremental_strategy\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:36.865451Z", "completed_at": "2025-04-09T16:48:36.901621Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:36.905591Z", "completed_at": "2025-04-09T16:48:36.905607Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04184722900390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_run_results", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as message\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as resource_type\n\n,\n                \n        cast(123456789.99 as float) as execution_time\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_completed_at\n\n,\n                \n        cast(31474836478 as bigint) as rows_affected\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as compiled_code\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as query_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as thread_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as adapter_response\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:36.915791Z", "completed_at": "2025-04-09T16:48:36.953914Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:36.955477Z", "completed_at": "2025-04-09T16:48:36.955496Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043149709701538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_seeds", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_seeds\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:36.961557Z", "completed_at": "2025-04-09T16:48:36.994514Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:36.995826Z", "completed_at": "2025-04-09T16:48:36.995838Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.037114858627319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_snapshots", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as checksum\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as patch_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as unique_key\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as incremental_strategy\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_snapshots\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.001081Z", "completed_at": "2025-04-09T16:48:37.034117Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.035855Z", "completed_at": "2025-04-09T16:48:37.035870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03789043426513672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_source_freshness_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as source_freshness_execution_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as max_loaded_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as snapshotted_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast(123456789.99 as float) as max_loaded_at_time_ago_in_s\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as compile_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as warn_after\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as filter\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_source_freshness_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.043097Z", "completed_at": "2025-04-09T16:48:37.072074Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.074241Z", "completed_at": "2025-04-09T16:48:37.074948Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035834550857543945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_sources", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as source_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as identifier\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as loaded_at_field\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as freshness_warn_after\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as freshness_error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as freshness_filter\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as freshness_description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as relation_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as meta\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owner\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as source_description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.082423Z", "completed_at": "2025-04-09T16:48:37.124409Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.125389Z", "completed_at": "2025-04-09T16:48:37.125403Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04529213905334473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_tests", "compiled": true, "compiled_code": "\n\nselect * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as short_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as alias\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as severity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as warn_if\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as error_if\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as test_params\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_namespace\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_original_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as model_tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as model_owners\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as meta\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as depends_on_nodes\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as parent_model_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as package_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as original_path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as path\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as metadata_hash\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as quality_dimension\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.130739Z", "completed_at": "2025-04-09T16:48:37.152791Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.153752Z", "completed_at": "2025-04-09T16:48:37.153767Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025634765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.elementary_test_results", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as test_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as model_unique_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as invocation_id\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as database_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_type\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as test_results_description\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as owners\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as test_results_query\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as test_params\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as severity\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as status\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_short_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as test_alias\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as result_rows\n\n,\n                \n        cast(31474836478 as bigint) as failed_row_count\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"elementary_test_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.157395Z", "completed_at": "2025-04-09T16:48:37.168547Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.169408Z", "completed_at": "2025-04-09T16:48:37.169421Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013923406600952148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.metadata", "compiled": true, "compiled_code": "\n\nSELECT\n    '0.18.1' as dbt_pkg_version", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"metadata\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.173836Z", "completed_at": "2025-04-09T16:48:37.187913Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.189014Z", "completed_at": "2025-04-09T16:48:37.189029Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016875505447387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.schema_columns_snapshot", "compiled": true, "compiled_code": "\n\n\n    select * from (\n            select\n            \n                \n        cast('dummy_string' as varchar(4096)) as column_state_id\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as column_name\n\n,\n                \n        cast('dummy_string' as varchar(4096)) as data_type\n\n,\n                \n        cast (True as boolean) as is_new\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0\n", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"schema_columns_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.193490Z", "completed_at": "2025-04-09T16:48:37.200310Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.201604Z", "completed_at": "2025-04-09T16:48:37.201621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010862350463867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.check_current_date", "compiled": true, "compiled_code": "select\n    current_date as current_date_value,\n    current_timestamp as current_timestamp_value,\n    current_timestamp::timestamp at time zone 'UTC' as current_utc_timestamp", "relation_name": "\"nexabrands_datawarehouse\".\"nexabrands_dbt\".\"check_current_date\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.205847Z", "completed_at": "2025-04-09T16:48:37.393164Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.395474Z", "completed_at": "2025-04-09T16:48:37.395491Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2003192901611328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.dim_date", "compiled": true, "compiled_code": "-- models/dim_date.sql\nWITH date_spine AS (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1095\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2023-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2025-12-31' as date)\n\n)\n\nselect * from filtered\n\n\n),\nenriched_dates AS (\n    SELECT\n        date_day as date,\n        EXTRACT(YEAR FROM date_day) as year,\n        EXTRACT(QUARTER FROM date_day) as quarter,\n        'Q' || EXTRACT(QUARTER FROM date_day) || '-' || EXTRACT(YEAR FROM date_day) as quarter_year,\n        EXTRACT(MONTH FROM date_day) as month_number,\n        TO_CHAR(date_day, 'Month') as month_name,\n        TO_CHAR(date_day, 'Mon-YYYY') as month_year,\n        EXTRACT(WEEK FROM date_day) as week_number,\n        DATE_TRUNC('week', date_day) as week_start_date,\n        DATE_TRUNC('week', date_day) + INTERVAL '6 days' as week_end_date,\n        EXTRACT(DAY FROM date_day) as day_of_month,\n        EXTRACT(DOW FROM date_day) as day_of_week_number,\n        TO_CHAR(date_day, 'Day') as day_name,\n        CASE\n            WHEN EXTRACT(MONTH FROM date_day) >= 4 THEN EXTRACT(YEAR FROM date_day)\n            ELSE EXTRACT(YEAR FROM date_day) - 1\n        END as fiscal_year,\n        CASE\n            WHEN EXTRACT(DOW FROM date_day) IN (0, 6) THEN 0\n            ELSE 1\n        END as is_weekday,\n        TO_CHAR(date_day, 'YYYYMMDD')::INTEGER as date_key\n    FROM date_spine\n)\nSELECT * FROM enriched_dates", "relation_name": "\"nexabrands_datawarehouse\".\"marts\".\"dim_date\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.409270Z", "completed_at": "2025-04-09T16:48:37.432637Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.436250Z", "completed_at": "2025-04-09T16:48:37.436285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029419422149658203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.stg_customer_targets", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"nexabrands_external\".\"customer_targets\"\n),\nstaged AS (\n    SELECT\n        customer_id,\n        \"ontime_target\",\n        \"infull_target\",\n        \"otif_target\"\n    FROM source\n)\nSELECT *\nFROM staged", "relation_name": "\"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.448403Z", "completed_at": "2025-04-09T16:48:37.465690Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.466584Z", "completed_at": "2025-04-09T16:48:37.466596Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024310588836669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.stg_customers", "compiled": true, "compiled_code": "-- models/staging/stg_customers.sql\nWITH source AS (\n    SELECT * FROM \"nexabrands_datawarehouse\".\"nexabrands_external\".\"customers\"\n),\nstaged AS (\n    SELECT\n        customer_id,\n        customer_name,\n        city\n    FROM source\n)\nSELECT * FROM staged", "relation_name": "\"nexabrands_datawarehouse\".\"staging\".\"stg_customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.473345Z", "completed_at": "2025-04-09T16:48:37.736114Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.737044Z", "completed_at": "2025-04-09T16:48:37.737058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2785964012145996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.stg_dates", "compiled": true, "compiled_code": "-- models/marts/dim_date.sql\nWITH date_spine AS (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2191\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2020-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2025-12-31' as date)\n\n)\n\nselect * from filtered\n\n\n),\nenriched_dates AS (\n    SELECT\n        date_day as date,\n        -- Year\n        EXTRACT(YEAR FROM date_day) as year,\n        -- Quarter\n        EXTRACT(QUARTER FROM date_day) as quarter,\n        'Q' || EXTRACT(QUARTER FROM date_day) || '-' || EXTRACT(YEAR FROM date_day) as quarter_year,\n        -- Month\n        EXTRACT(MONTH FROM date_day) as month_number,\n        TO_CHAR(date_day, 'Month') as month_name,\n        TO_CHAR(date_day, 'Mon-YYYY') as month_year,\n        -- Week\n        EXTRACT(WEEK FROM date_day) as week_number,\n        DATE_TRUNC('week', date_day) as week_start_date,\n        DATE_TRUNC('week', date_day) + INTERVAL '6 days' as week_end_date,\n        -- Day\n        EXTRACT(DAY FROM date_day) as day_of_month,\n        EXTRACT(DOW FROM date_day) as day_of_week_number,\n        TO_CHAR(date_day, 'Day') as day_name,\n        -- Fiscal year (assuming starts in April)\n        CASE\n            WHEN EXTRACT(MONTH FROM date_day) >= 4\n            THEN EXTRACT(YEAR FROM date_day)\n            ELSE EXTRACT(YEAR FROM date_day) - 1\n        END as fiscal_year,\n        -- Is this a weekday?\n        CASE\n            WHEN EXTRACT(DOW FROM date_day) IN (0, 6) THEN 0\n            ELSE 1\n        END as is_weekday,\n        -- Create date key for joining\n        TO_CHAR(date_day, 'YYYYMMDD')::INTEGER as date_key\n    FROM date_spine\n)\nSELECT * FROM enriched_dates", "relation_name": "\"nexabrands_datawarehouse\".\"staging\".\"stg_dates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.756899Z", "completed_at": "2025-04-09T16:48:37.769917Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.772035Z", "completed_at": "2025-04-09T16:48:37.772050Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01888298988342285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.stg_order_fulfillment", "compiled": true, "compiled_code": "-- models/staging/stg_order_fulfillment.sql\nWITH source AS (\n    SELECT * FROM \"nexabrands_datawarehouse\".\"nexabrands_external\".\"order_fulfillment\"\n),\nstaged AS (\n    SELECT\n        order_id,\n        on_time,\n        in_full,\n        otif as ontime_in_full\n    FROM source\n)\nSELECT * FROM staged", "relation_name": "\"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.776734Z", "completed_at": "2025-04-09T16:48:37.789318Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.791271Z", "completed_at": "2025-04-09T16:48:37.791293Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01660442352294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.stg_order_lines", "compiled": true, "compiled_code": "-- models/staging/stg_order_lines.sql\nWITH source AS (\n    SELECT * FROM \"nexabrands_datawarehouse\".\"nexabrands_external\".\"order_lines\"\n),\nstaged AS (\n    SELECT\n        order_id,\n        product_id,\n        order_qty,\n        agreed_delivery_date,\n        actual_delivery_date,\n        delivery_qty,\n        \n    md5(cast(coalesce(cast(order_id as TEXT), '') || coalesce(cast(product_id as TEXT), '') as TEXT))\n as order_line_id\n    FROM source\n)\nSELECT * FROM staged", "relation_name": "\"nexabrands_datawarehouse\".\"staging\".\"stg_order_lines\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:37.801942Z", "completed_at": "2025-04-09T16:48:37.831788Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:37.833687Z", "completed_at": "2025-04-09T16:48:37.833752Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03890633583068848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.stg_orders", "compiled": true, "compiled_code": "-- models/staging/stg_orders.sql\nWITH source AS (\n    SELECT * FROM \"nexabrands_datawarehouse\".\"nexabrands_external\".\"orders\"\n),\nstaged AS (\n    SELECT\n        order_id,\n        customer_id,\n        order_placement_date\n    FROM source\n)\nSELECT * FROM staged", "relation_name": "\"nexabrands_datawarehouse\".\"staging\".\"stg_orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.134615Z", "completed_at": "2025-04-09T16:48:38.156957Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.158578Z", "completed_at": "2025-04-09T16:48:38.158595Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.32123827934265137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.stg_products", "compiled": true, "compiled_code": "-- models/staging/stg_products.sql\nWITH source AS (\n    SELECT * FROM \"nexabrands_datawarehouse\".\"nexabrands_external\".\"products\"\n),\nstaged AS (\n    SELECT\n        product_id,\n        product_name,\n        category\n    FROM source\n)\nSELECT * FROM staged", "relation_name": "\"nexabrands_datawarehouse\".\"staging\".\"stg_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.417380Z", "completed_at": "2025-04-09T16:48:38.430260Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.431032Z", "completed_at": "2025-04-09T16:48:38.431044Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01623368263244629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.elementary.elementary-on-run-end-0", "compiled": true, "compiled_code": "\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.434760Z", "completed_at": "2025-04-09T16:48:38.481464Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.482312Z", "completed_at": "2025-04-09T16:48:38.482326Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04975247383117676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.elementary.elementary-on-run-start-0", "compiled": true, "compiled_code": "\n  \n  \n\n  \n  \n  \n\n  \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.486665Z", "completed_at": "2025-04-09T16:48:38.498559Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.499501Z", "completed_at": "2025-04-09T16:48:38.499517Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015201807022094727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.nexabrands_dbt.scd_customers", "compiled": true, "compiled_code": "\n\n\nselect *\nFROM  \"nexabrands_datawarehouse\".\"nexabrands_external\".\"customers\"\n", "relation_name": "\"nexabrands_datawarehouse\".\"nexabrands_external\".\"scd_customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.503722Z", "completed_at": "2025-04-09T16:48:38.517904Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.519009Z", "completed_at": "2025-04-09T16:48:38.519023Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017237186431884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.nexabrands_dbt.scd_orders", "compiled": true, "compiled_code": "\n\n\nselect *\nFROM  \"nexabrands_datawarehouse\".\"nexabrands_external\".\"orders\"\n", "relation_name": "\"nexabrands_datawarehouse\".\"nexabrands_external\".\"scd_orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.523772Z", "completed_at": "2025-04-09T16:48:38.531501Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.532948Z", "completed_at": "2025-04-09T16:48:38.532971Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011545419692993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.test_delivery_dates_consistency", "compiled": true, "compiled_code": "", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.539131Z", "completed_at": "2025-04-09T16:48:38.548158Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.549509Z", "completed_at": "2025-04-09T16:48:38.549525Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013245105743408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.test_delivery_quantities_consistency", "compiled": true, "compiled_code": "", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.553852Z", "completed_at": "2025-04-09T16:48:38.568323Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.569254Z", "completed_at": "2025-04-09T16:48:38.569267Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01754903793334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.metrics_anomaly_score", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"data_monitoring_metrics\"\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and bucket_end >= \n    dateadd(day, cast(-7 as integer), cast(date_trunc('day', getdate()) as timestamp))\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > 3 then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"metrics_anomaly_score\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.576065Z", "completed_at": "2025-04-09T16:48:38.590795Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.592008Z", "completed_at": "2025-04-09T16:48:38.592021Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01975846290588379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.monitors_runs", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"data_monitoring_metrics\"\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end,\n           min(bucket_end) as first_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"monitors_runs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.597929Z", "completed_at": "2025-04-09T16:48:38.611338Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.612415Z", "completed_at": "2025-04-09T16:48:38.612428Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016219377517700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.job_run_results", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    \nmin(cast(run_started_at as timestamp))\n as job_run_started_at,\n    \nmax(cast(run_completed_at as timestamp))\n as job_run_completed_at,\n    \n    datediff(\n        second,\n        \nmin(cast(run_started_at as timestamp))\n,\n        \nmax(cast(run_completed_at as timestamp))\n\n        )\n as job_run_execution_time\n  from \"nexabrands_datawarehouse\".\"elementary\".\"dbt_invocations\"\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"job_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.616492Z", "completed_at": "2025-04-09T16:48:38.634801Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.636091Z", "completed_at": "2025-04-09T16:48:38.636104Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021559715270996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.model_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"dbt_run_results\"\n),\n\ndbt_models as (\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"dbt_models\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    coalesce(run_results.materialization, models.materialization) as materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as timestamp))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"model_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.641811Z", "completed_at": "2025-04-09T16:48:38.654096Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.655521Z", "completed_at": "2025-04-09T16:48:38.655579Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017435550689697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.seed_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"dbt_run_results\"\n),\n\ndbt_seeds as (\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"dbt_seeds\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    seeds.database_name,\n    seeds.schema_name,\n    run_results.materialization,\n    seeds.tags,\n    seeds.package_name,\n    seeds.path,\n    seeds.original_path,\n    seeds.owner,\n    seeds.alias\nFROM dbt_run_results run_results\nJOIN dbt_seeds seeds ON run_results.unique_id = seeds.unique_id", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"seed_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.660918Z", "completed_at": "2025-04-09T16:48:38.677915Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.679513Z", "completed_at": "2025-04-09T16:48:38.679532Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021057844161987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.snapshot_run_results", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"dbt_run_results\"\n),\n\ndbt_snapshots as (\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"dbt_snapshots\"\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.adapter_response,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    coalesce(run_results.materialization, snapshots.materialization) as materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"snapshot_run_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.683973Z", "completed_at": "2025-04-09T16:48:38.701132Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.702557Z", "completed_at": "2025-04-09T16:48:38.702571Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02085113525390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_source_freshness", "compiled": true, "compiled_code": "\n\nwith results as (\n  select * from \"nexabrands_datawarehouse\".\"elementary\".\"dbt_source_freshness_results\"\n),\n\nsources as (\n  select * from \"nexabrands_datawarehouse\".\"elementary\".\"dbt_sources\"\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  cast(results.generated_at as timestamp) as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  results.warn_after,\n  results.error_after,\n  results.filter,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path,\n  -- These columns below are deprecated. We add them since this view\n  -- was used to be loaded into an incremental model with those columns, their names were later changed\n  -- and Databricks doesn't respect `on_schema_change = 'append_new_columns'` properly, as described here -\n  -- https://docs.databricks.com/en/delta/update-schema.html#automatic-schema-evolution-for-delta-lake-merge\n  results.error_after as freshness_error_after,\n  results.warn_after as freshness_warn_after,\n  results.filter as freshness_filter\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere True and lower(status) != 'pass'", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"alerts_dbt_source_freshness\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.708859Z", "completed_at": "2025-04-09T16:48:38.736386Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.739915Z", "completed_at": "2025-04-09T16:48:38.739939Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0335843563079834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.dbt_artifacts_hashes", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n  'dbt_models' as artifacts_model,\n   metadata_hash\nfrom \"nexabrands_datawarehouse\".\"elementary\".\"dbt_models\"\n union all \n\nselect\n  'dbt_tests' as artifacts_model,\n   metadata_hash\nfrom \"nexabrands_datawarehouse\".\"elementary\".\"dbt_tests\"\n union all \n\nselect\n  'dbt_sources' as artifacts_model,\n   metadata_hash\nfrom \"nexabrands_datawarehouse\".\"elementary\".\"dbt_sources\"\n union all \n\nselect\n  'dbt_snapshots' as artifacts_model,\n   metadata_hash\nfrom \"nexabrands_datawarehouse\".\"elementary\".\"dbt_snapshots\"\n union all \n\nselect\n  'dbt_metrics' as artifacts_model,\n   metadata_hash\nfrom \"nexabrands_datawarehouse\".\"elementary\".\"dbt_metrics\"\n union all \n\nselect\n  'dbt_exposures' as artifacts_model,\n   metadata_hash\nfrom \"nexabrands_datawarehouse\".\"elementary\".\"dbt_exposures\"\n union all \n\nselect\n  'dbt_seeds' as artifacts_model,\n   metadata_hash\nfrom \"nexabrands_datawarehouse\".\"elementary\".\"dbt_seeds\"\n union all \n\nselect\n  'dbt_columns' as artifacts_model,\n   metadata_hash\nfrom \"nexabrands_datawarehouse\".\"elementary\".\"dbt_columns\"\n\n\norder by metadata_hash", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"dbt_artifacts_hashes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.746685Z", "completed_at": "2025-04-09T16:48:38.768295Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.769162Z", "completed_at": "2025-04-09T16:48:38.769176Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025028467178344727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_anomaly_detection", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"elementary_test_results\"\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"alerts_anomaly_detection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.774607Z", "completed_at": "2025-04-09T16:48:38.795275Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.802283Z", "completed_at": "2025-04-09T16:48:38.802305Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0294797420501709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_tests", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"elementary_test_results\"\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'   and lower(status) != 'skipped'  and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"alerts_dbt_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.808169Z", "completed_at": "2025-04-09T16:48:38.820574Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.821309Z", "completed_at": "2025-04-09T16:48:38.821321Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015097856521606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_schema_changes", "compiled": true, "compiled_code": "\n\n\nwith elementary_test_results as (\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"elementary_test_results\"\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"alerts_schema_changes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.826835Z", "completed_at": "2025-04-09T16:48:38.842988Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.844122Z", "completed_at": "2025-04-09T16:48:38.844136Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023864269256591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.test_result_rows", "compiled": true, "compiled_code": "-- indexes are not supported in all warehouses, relevant to postgres only\n\n\n-- depends_on: \"nexabrands_datawarehouse\".\"elementary\".\"elementary_test_results\"\nselect * from (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as elementary_test_results_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar(65535)) as result_row\n\n,\n                cast('2091-02-17' as timestamp) as detected_at\n\n,\n                cast('2091-02-17' as timestamp) as created_at\n\n\n        ) as empty_table\n        where 1 = 0", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"test_result_rows\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.856599Z", "completed_at": "2025-04-09T16:48:38.867325Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.868525Z", "completed_at": "2025-04-09T16:48:38.868539Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014248847961425781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_infull_target__otif_target__True.5277415478", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  infull_target >= otif_target as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.874768Z", "completed_at": "2025-04-09T16:48:38.894080Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.895997Z", "completed_at": "2025-04-09T16:48:38.896011Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022911548614501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_customer_targets_ontime_target__otif_target__True.e07a51facc", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  ontime_target >= otif_target as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.901318Z", "completed_at": "2025-04-09T16:48:38.911231Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.912099Z", "completed_at": "2025-04-09T16:48:38.912110Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013953208923339844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_infull_target__100__0.d5824578f5", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and infull_target >= 0 and infull_target <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.916287Z", "completed_at": "2025-04-09T16:48:38.937736Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.938924Z", "completed_at": "2025-04-09T16:48:38.939800Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0252530574798584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_ontime_target__100__0.41469dcdf6", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and ontime_target >= 0 and ontime_target <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.945638Z", "completed_at": "2025-04-09T16:48:38.957123Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.957920Z", "completed_at": "2025-04-09T16:48:38.957934Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014036417007446289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_customer_targets_otif_target__100__0.20c157cf69", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and otif_target >= 0 and otif_target <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.961727Z", "completed_at": "2025-04-09T16:48:38.982788Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:38.985442Z", "completed_at": "2025-04-09T16:48:38.985462Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0260770320892334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_customer_id.528be64241", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:38.992279Z", "completed_at": "2025-04-09T16:48:39.004945Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.006079Z", "completed_at": "2025-04-09T16:48:39.006091Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01681661605834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_infull_target.848a26f728", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect infull_target\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\nwhere infull_target is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.011408Z", "completed_at": "2025-04-09T16:48:39.023207Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.024043Z", "completed_at": "2025-04-09T16:48:39.024056Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014156579971313477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_ontime_target.5042478108", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ontime_target\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\nwhere ontime_target is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.028626Z", "completed_at": "2025-04-09T16:48:39.047981Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.052274Z", "completed_at": "2025-04-09T16:48:39.052288Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025745630264282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_customer_targets_otif_target.74d072ca2a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect otif_target\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\nwhere otif_target is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.062379Z", "completed_at": "2025-04-09T16:48:39.084191Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.084848Z", "completed_at": "2025-04-09T16:48:39.084859Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02431178092956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.unique_stg_customer_targets_customer_id.eada6988f9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.088770Z", "completed_at": "2025-04-09T16:48:39.097006Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.097695Z", "completed_at": "2025-04-09T16:48:39.097706Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010293960571289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.dim_customer", "compiled": true, "compiled_code": "-- models/dim_customers.sql\nWITH customers AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\n),\ncustomer_targets AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_customer_targets\"\n)\nSELECT\n    c.customer_id,\n    c.customer_name,\n    c.city,\n    ct.ontime_target,\n    ct.infull_target,\n    ct.otif_target\nFROM customers c\nLEFT JOIN customer_targets ct\n    ON c.customer_id = ct.customer_id", "relation_name": "\"nexabrands_datawarehouse\".\"marts\".\"dim_customer\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.100729Z", "completed_at": "2025-04-09T16:48:39.109959Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.110739Z", "completed_at": "2025-04-09T16:48:39.110752Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01141047477722168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.accepted_values_stg_customers_city__True__Klerksdorp__Polokwane__Stellenbosch__Paarl__East_London__Grahamstown__George__Upington__Bloemfontein__Worcester__Pietermaritzburg__Pretoria__Nelspruit__Kimberley__Johannesburg__Cape_Town.e541883a0e", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        city as value_field,\n        count(*) as n_records\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\n    group by city\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Klerksdorp','Polokwane','Stellenbosch','Paarl','East London','Grahamstown','George','Upington','Bloemfontein','Worcester','Pietermaritzburg','Pretoria','Nelspruit','Kimberley','Johannesburg','Cape Town'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.114025Z", "completed_at": "2025-04-09T16:48:39.123069Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.123740Z", "completed_at": "2025-04-09T16:48:39.123753Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011234283447265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_city__50__2.75f73ba182", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and len(\n        city\n    ) >= 2 and len(\n        city\n    ) <= 50\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.127006Z", "completed_at": "2025-04-09T16:48:39.137589Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.138197Z", "completed_at": "2025-04-09T16:48:39.138209Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012668609619140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_customers_customer_name__100__2.862ed945bf", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and len(\n        customer_name\n    ) >= 2 and len(\n        customer_name\n    ) <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.142829Z", "completed_at": "2025-04-09T16:48:39.470011Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.471634Z", "completed_at": "2025-04-09T16:48:39.471653Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3396313190460205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_customers_customer_id__customer_name__city.68cf07e70d", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as relation_column\n        union all\n        \n        select cast('CITY' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select cast('CUSTOMER_NAME' as TEXT) as input_column\n        union all\n        \n        select cast('CITY' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.485699Z", "completed_at": "2025-04-09T16:48:39.496963Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.500863Z", "completed_at": "2025-04-09T16:48:39.500876Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01708245277404785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_customers_100__1.532da0c1f4", "compiled": true, "compiled_code": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.505939Z", "completed_at": "2025-04-09T16:48:39.519670Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.522201Z", "completed_at": "2025-04-09T16:48:39.522217Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018499374389648438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_customers_city.54fe47bfb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\nwhere city is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.528838Z", "completed_at": "2025-04-09T16:48:39.538801Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.539453Z", "completed_at": "2025-04-09T16:48:39.539465Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0123443603515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_id.e2cfb1f9aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.544037Z", "completed_at": "2025-04-09T16:48:39.556575Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.558801Z", "completed_at": "2025-04-09T16:48:39.558816Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017780780792236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_customers_customer_name.5c92a78a60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\nwhere customer_name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.563947Z", "completed_at": "2025-04-09T16:48:39.579517Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.580194Z", "completed_at": "2025-04-09T16:48:39.580206Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018634319305419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.unique_stg_customers_customer_id.c7614daada", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.585679Z", "completed_at": "2025-04-09T16:48:39.600175Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.601296Z", "completed_at": "2025-04-09T16:48:39.601309Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017536401748657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_equal_stg_dates_date__10.ddb94d6f63", "compiled": true, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n    len(\n        date\n    ) = 10 as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.611160Z", "completed_at": "2025-04-09T16:48:39.970851Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:39.971999Z", "completed_at": "2025-04-09T16:48:39.972016Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3767828941345215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_dates_date.2d0c578b06", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select cast('DATE' as TEXT) as relation_column\n        union all\n        \n        select cast('YEAR' as TEXT) as relation_column\n        union all\n        \n        select cast('QUARTER' as TEXT) as relation_column\n        union all\n        \n        select cast('QUARTER_YEAR' as TEXT) as relation_column\n        union all\n        \n        select cast('MONTH_NUMBER' as TEXT) as relation_column\n        union all\n        \n        select cast('MONTH_NAME' as TEXT) as relation_column\n        union all\n        \n        select cast('MONTH_YEAR' as TEXT) as relation_column\n        union all\n        \n        select cast('WEEK_NUMBER' as TEXT) as relation_column\n        union all\n        \n        select cast('WEEK_START_DATE' as TEXT) as relation_column\n        union all\n        \n        select cast('WEEK_END_DATE' as TEXT) as relation_column\n        union all\n        \n        select cast('DAY_OF_MONTH' as TEXT) as relation_column\n        union all\n        \n        select cast('DAY_OF_WEEK_NUMBER' as TEXT) as relation_column\n        union all\n        \n        select cast('DAY_NAME' as TEXT) as relation_column\n        union all\n        \n        select cast('FISCAL_YEAR' as TEXT) as relation_column\n        union all\n        \n        select cast('IS_WEEKDAY' as TEXT) as relation_column\n        union all\n        \n        select cast('DATE_KEY' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:39.984820Z", "completed_at": "2025-04-09T16:48:39.999956Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.000724Z", "completed_at": "2025-04-09T16:48:40.000737Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01805281639099121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_dates_1.719d3ad97a", "compiled": true, "compiled_code": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_dates\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.005611Z", "completed_at": "2025-04-09T16:48:40.025239Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.027940Z", "completed_at": "2025-04-09T16:48:40.027955Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02482891082763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_dates_date.0b6295f5bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_dates\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.035335Z", "completed_at": "2025-04-09T16:48:40.043225Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.052184Z", "completed_at": "2025-04-09T16:48:40.052197Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02001166343688965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.accepted_values_stg_order_fulfillment_in_full__True__0__1.4b722af630", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        in_full as value_field,\n        count(*) as n_records\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\"\n    group by in_full\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.057202Z", "completed_at": "2025-04-09T16:48:40.073570Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.074627Z", "completed_at": "2025-04-09T16:48:40.074640Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019610881805419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.accepted_values_stg_order_fulfillment_on_time__True__0__1.8bc1473d95", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        on_time as value_field,\n        count(*) as n_records\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\"\n    group by on_time\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.080674Z", "completed_at": "2025-04-09T16:48:40.099903Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.103039Z", "completed_at": "2025-04-09T16:48:40.103052Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025922060012817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.accepted_values_stg_order_fulfillment_ontime_in_full__True__0__1.3b38ec7b73", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        ontime_in_full as value_field,\n        count(*) as n_records\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\"\n    group by ontime_in_full\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.110022Z", "completed_at": "2025-04-09T16:48:40.441493Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.442550Z", "completed_at": "2025-04-09T16:48:40.442570Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3452417850494385, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_stg_order_fulfillment_order_id__on_time__in_full__ontime_in_full.4d470eb185", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select cast('ORDER_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('ON_TIME' as TEXT) as relation_column\n        union all\n        \n        select cast('IN_FULL' as TEXT) as relation_column\n        union all\n        \n        select cast('ONTIME_IN_FULL' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('ORDER_ID' as TEXT) as input_column\n        union all\n        \n        select cast('ON_TIME' as TEXT) as input_column\n        union all\n        \n        select cast('IN_FULL' as TEXT) as input_column\n        union all\n        \n        select cast('ONTIME_IN_FULL' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.457461Z", "completed_at": "2025-04-09T16:48:40.476401Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.477486Z", "completed_at": "2025-04-09T16:48:40.477505Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022614717483520508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_order_fulfillment_1.0283bc6212", "compiled": true, "compiled_code": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.484219Z", "completed_at": "2025-04-09T16:48:40.501392Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.502404Z", "completed_at": "2025-04-09T16:48:40.502423Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0203397274017334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_order_fulfillment_in_full.7f52ec5fb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect in_full\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\"\nwhere in_full is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.509764Z", "completed_at": "2025-04-09T16:48:40.523424Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.524445Z", "completed_at": "2025-04-09T16:48:40.524462Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017800092697143555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_order_fulfillment_on_time.cb8d53a996", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect on_time\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\"\nwhere on_time is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.530261Z", "completed_at": "2025-04-09T16:48:40.543773Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.544824Z", "completed_at": "2025-04-09T16:48:40.544837Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01703476905822754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_order_fulfillment_ontime_in_full.d8e8bdce2a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ontime_in_full\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\"\nwhere ontime_in_full is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.548751Z", "completed_at": "2025-04-09T16:48:40.557217Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.558274Z", "completed_at": "2025-04-09T16:48:40.558286Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011276006698608398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.fact_order_line_performance", "compiled": true, "compiled_code": "-- models/fact_order_line_performance.sql\nWITH order_lines AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_order_lines\"\n),\norders AS (\n    SELECT order_id, customer_id, order_placement_date\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\n)\nSELECT\n    ol.order_line_id,\n    ol.order_id,\n    ol.product_id,\n    ol.order_qty,\n    ol.delivery_qty,\n    ol.agreed_delivery_date,\n    ol.actual_delivery_date,\n    -- Calculate Volume Fill Rate: delivered_qty / order_qty (as a decimal)\n    CASE\n        WHEN ol.order_qty > 0 THEN (ol.delivery_qty::numeric / ol.order_qty)\n        ELSE NULL\n    END AS volume_fill_rate,\n    -- Calculate Line Fill Rate: 1 if fully delivered, else 0\n    CASE\n        WHEN ol.delivery_qty = ol.order_qty THEN 1\n        ELSE 0\n    END AS line_fill_rate\nFROM order_lines ol\nJOIN orders o\n    ON ol.order_id = o.order_id", "relation_name": "\"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.567777Z", "completed_at": "2025-04-09T16:48:40.585183Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.586509Z", "completed_at": "2025-04-09T16:48:40.586525Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025066375732421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.fact_order_performance", "compiled": true, "compiled_code": "WITH orders AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\n),\n\norder_fulfillment AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\"\n),\n\ncustomers AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_customers\"\n),\n\n-- First get the base order data with fulfillment metrics\nbase_orders AS (\n    SELECT\n        o.order_id,\n        o.customer_id,\n        COALESCE(c.customer_name, 'Unknown') as customer_name,\n        COALESCE(c.city, 'Unknown') as city,\n        DATE_TRUNC('day', o.order_placement_date) AS order_date,\n        ofu.on_time,\n        ofu.in_full,\n        ofu.ontime_in_full AS otif\n    FROM orders o\n    JOIN order_fulfillment ofu\n        ON o.order_id = ofu.order_id\n    LEFT JOIN customers c\n        ON o.customer_id = c.customer_id\n),\n\n-- Calculate daily aggregates by city and customer\ndaily_metrics AS (\n    SELECT\n        order_date,\n        city,\n        customer_name,\n        COUNT(*) AS total_orders,\n        ROUND(100.0 * AVG(on_time), 2) AS on_time_percentage,\n        ROUND(100.0 * AVG(in_full), 2) AS in_full_percentage,\n        ROUND(100.0 * AVG(otif), 2) AS otif_percentage\n    FROM base_orders\n    GROUP BY order_date, city, customer_name\n),\n\n-- Calculate rolling 7-day averages\nrolling_metrics AS (\n    SELECT\n        order_date,\n        city,\n        customer_name,\n        total_orders,\n        on_time_percentage,\n        in_full_percentage,\n        otif_percentage,\n        ROUND(AVG(on_time_percentage) OVER (\n            PARTITION BY city, customer_name\n            ORDER BY order_date\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ), 2) AS seven_day_avg_on_time,\n        ROUND(AVG(in_full_percentage) OVER (\n            PARTITION BY city, customer_name\n            ORDER BY order_date\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ), 2) AS seven_day_avg_in_full,\n        ROUND(AVG(otif_percentage) OVER (\n            PARTITION BY city, customer_name\n            ORDER BY order_date\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ), 2) AS seven_day_avg_otif\n    FROM daily_metrics\n)\n\nSELECT * FROM rolling_metrics\nORDER BY order_date DESC, city, customer_name", "relation_name": "\"nexabrands_datawarehouse\".\"marts\".\"fact_order_performance\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.590152Z", "completed_at": "2025-04-09T16:48:40.598753Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.599705Z", "completed_at": "2025-04-09T16:48:40.599867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011275053024291992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.fact_order_performance_percentage", "compiled": true, "compiled_code": "WITH orders AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\n),\norder_fulfillment AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_order_fulfillment\"\n),\njoined_data AS (\n    SELECT\n        o.order_id,\n        o.customer_id,\n        o.order_placement_date AS order_date,  -- to join with dim_date if needed\n        ofu.on_time,\n        ofu.in_full,\n        ofu.ontime_in_full AS otif\n    FROM orders o\n    JOIN order_fulfillment ofu\n        ON o.order_id = ofu.order_id\n)\nSELECT\n    ROUND((SUM(on_time::numeric) / COUNT(*)) * 100, 2) AS on_time_percentage,\n    ROUND((SUM(in_full::numeric) / COUNT(*)) * 100, 2) AS in_full_percentage,\n    ROUND((SUM(otif::numeric) / COUNT(*)) * 100, 2) AS otif_percentage\nFROM joined_data", "relation_name": "\"nexabrands_datawarehouse\".\"marts\".\"fact_order_performance_percentage\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.605390Z", "completed_at": "2025-04-09T16:48:40.618672Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.619673Z", "completed_at": "2025-04-09T16:48:40.619688Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017206430435180664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_customer_id__50__1.4bd54d8012", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and len(\n        customer_id\n    ) >= 1 and len(\n        customer_id\n    ) <= 50\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.626307Z", "completed_at": "2025-04-09T16:48:40.643246Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.653276Z", "completed_at": "2025-04-09T16:48:40.653308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030263185501098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_orders_order_id__50__1.0ecb6709db", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and len(\n        order_id\n    ) >= 1 and len(\n        order_id\n    ) <= 50\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.660276Z", "completed_at": "2025-04-09T16:48:40.680701Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:40.681670Z", "completed_at": "2025-04-09T16:48:40.681685Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024513959884643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_orders_order_placement_date__current_date___2024_01_01_.9a31a15386", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_placement_date >= '2024-01-01' and order_placement_date <= current_date\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:40.685027Z", "completed_at": "2025-04-09T16:48:41.041743Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.043097Z", "completed_at": "2025-04-09T16:48:41.043110Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3653113842010498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_of_type_stg_orders_order_placement_date__date.518b599ba0", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_ID' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUSTOMER_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ORDER_PLACEMENT_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.054296Z", "completed_at": "2025-04-09T16:48:41.066989Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.067672Z", "completed_at": "2025-04-09T16:48:41.067684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015233278274536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_compound_columns_to_be_unique_stg_orders_customer_id__order_placement_date__order_id.c72b454e6a", "compiled": true, "compiled_code": "\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id,order_placement_date,order_id,\n        count(*) as \"n_records\"\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\n    where\n        1=1\n        and \n    not (\n        customer_id is null and \n        order_placement_date is null and \n        order_id is null\n        \n    )\n\n\n    \n    group by\n        customer_id,order_placement_date,order_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.072387Z", "completed_at": "2025-04-09T16:48:41.405345Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.406138Z", "completed_at": "2025-04-09T16:48:41.406150Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.34211158752441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_orders_order_id__customer_id__order_placement_date.26d5dbb404", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('ORDER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('ORDER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('CUSTOMER_ID' as TEXT) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('ORDER_PLACEMENT_DATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.420723Z", "completed_at": "2025-04-09T16:48:41.445978Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.459458Z", "completed_at": "2025-04-09T16:48:41.459477Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.042742013931274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_orders_10000000__1.d2cd7717b3", "compiled": true, "compiled_code": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 10000000\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.470620Z", "completed_at": "2025-04-09T16:48:41.746898Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.747566Z", "completed_at": "2025-04-09T16:48:41.747578Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.27930188179016113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_orders_customer_id.af79d5e4b5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.752175Z", "completed_at": "2025-04-09T16:48:41.763268Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.765102Z", "completed_at": "2025-04-09T16:48:41.765252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014688491821289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_orders_order_id.81cfe2fe64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.769711Z", "completed_at": "2025-04-09T16:48:41.780115Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.781299Z", "completed_at": "2025-04-09T16:48:41.781320Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01351022720336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_orders_order_placement_date.b80fa199d8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_placement_date\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\nwhere order_placement_date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.785112Z", "completed_at": "2025-04-09T16:48:41.799603Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.802320Z", "completed_at": "2025-04-09T16:48:41.802338Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02289605140686035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.unique_stg_orders_order_id.e3b841c71a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.820457Z", "completed_at": "2025-04-09T16:48:41.848489Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.851053Z", "completed_at": "2025-04-09T16:48:41.851070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03775787353515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nexabrands_dbt.dim_product", "compiled": true, "compiled_code": "-- models/dim_products.sql\nWITH source AS (\n    SELECT *\n    FROM \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\n)\nSELECT\n    product_id,\n    product_name,\n    category\nFROM source", "relation_name": "\"nexabrands_datawarehouse\".\"marts\".\"dim_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.860111Z", "completed_at": "2025-04-09T16:48:41.873338Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.874027Z", "completed_at": "2025-04-09T16:48:41.874040Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01859903335571289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.accepted_values_stg_products_category__Dairy__beverages__Food.9a74aea575", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        category as value_field,\n        count(*) as n_records\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\n    group by category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Dairy','beverages','Food'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.877949Z", "completed_at": "2025-04-09T16:48:41.887580Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.888222Z", "completed_at": "2025-04-09T16:48:41.888234Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01228475570678711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_products_category__50__2.f036dd83e2", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and len(\n        category\n    ) >= 2 and len(\n        category\n    ) <= 50\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.892345Z", "completed_at": "2025-04-09T16:48:41.901670Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.903263Z", "completed_at": "2025-04-09T16:48:41.903276Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013096332550048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_value_lengths_to_be_between_stg_products_product_name__100__1.2a82c98710", "compiled": true, "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and len(\n        product_name\n    ) >= 1 and len(\n        product_name\n    ) <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.907357Z", "completed_at": "2025-04-09T16:48:41.921326Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.922054Z", "completed_at": "2025-04-09T16:48:41.922066Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016777992248535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_stg_products_product_id__1__product_id_IS_NOT_NULL__True.0e54fce5ed", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and product_id > 1\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\n    where\n        product_id IS NOT NULL\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.925255Z", "completed_at": "2025-04-09T16:48:41.934276Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.935416Z", "completed_at": "2025-04-09T16:48:41.935427Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011899709701538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_in_set_stg_products_category__Dairy__beverages__Food.af6390bd10", "compiled": true, "compiled_code": "\n\nwith all_values as (\n\n    select\n        category as value_field\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\n    \n\n),\nset_values as (\n\n    select\n        cast('Dairy' as TEXT) as value_field\n    union all\n    select\n        cast('beverages' as TEXT) as value_field\n    union all\n    select\n        cast('Food' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.939906Z", "completed_at": "2025-04-09T16:48:41.965530Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.966494Z", "completed_at": "2025-04-09T16:48:41.966512Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028939008712768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_not_match_regex_stg_products_product_name___s_.11c7940908", "compiled": true, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \n\nregexp_instr(product_name, '^\\\\s*$', 1, 1, 0, '')\n\n\n = 0\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:41.970609Z", "completed_at": "2025-04-09T16:48:41.991686Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:41.995323Z", "completed_at": "2025-04-09T16:48:41.995342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026782989501953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_compound_columns_to_be_unique_stg_products_product_name__category.e804075419", "compiled": true, "compiled_code": "\n\n\n\nwith validation_errors as (\n\n    select\n        product_name,category,\n        count(*) as \"n_records\"\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\n    where\n        1=1\n        and \n    not (\n        product_name is null and \n        category is null\n        \n    )\n\n\n    \n    group by\n        product_name,category\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.006920Z", "completed_at": "2025-04-09T16:48:42.326419Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.327835Z", "completed_at": "2025-04-09T16:48:42.327848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.34651994705200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_ordered_list_stg_products_product_id__product_name__category.393dada602", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            1 as relation_column_idx,\n            cast('PRODUCT_ID' as TEXT) as relation_column\n        union all\n        \n        select\n            2 as relation_column_idx,\n            cast('PRODUCT_NAME' as TEXT) as relation_column\n        union all\n        \n        select\n            3 as relation_column_idx,\n            cast('CATEGORY' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select\n            1 as input_column_idx,\n            cast('PRODUCT_ID' as TEXT) as input_column\n        union all\n        \n        select\n            2 as input_column_idx,\n            cast('PRODUCT_NAME' as TEXT) as input_column\n        union all\n        \n        select\n            3 as input_column_idx,\n            cast('CATEGORY' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.361828Z", "completed_at": "2025-04-09T16:48:42.373040Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.374448Z", "completed_at": "2025-04-09T16:48:42.374462Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022461652755737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_stg_products_100__1.bd6a3a0191", "compiled": true, "compiled_code": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.378075Z", "completed_at": "2025-04-09T16:48:42.388564Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.389811Z", "completed_at": "2025-04-09T16:48:42.389825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013348817825317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_products_category.6007d8b2d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\nwhere category is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.393621Z", "completed_at": "2025-04-09T16:48:42.408487Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.409446Z", "completed_at": "2025-04-09T16:48:42.409465Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01783013343811035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_products_product_id.6373b0acf3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.413968Z", "completed_at": "2025-04-09T16:48:42.424044Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.425000Z", "completed_at": "2025-04-09T16:48:42.425012Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013039827346801758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_stg_products_product_name.0b59e4b939", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\nwhere product_name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.429256Z", "completed_at": "2025-04-09T16:48:42.443423Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.444492Z", "completed_at": "2025-04-09T16:48:42.444506Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01749897003173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.unique_stg_products_product_id.7d950a1467", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"nexabrands_datawarehouse\".\"staging\".\"stg_products\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.449132Z", "completed_at": "2025-04-09T16:48:42.475264Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.476339Z", "completed_at": "2025-04-09T16:48:42.476357Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029157638549804688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.redshift.redshift_admin_dependencies", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n),  __dbt__cte__pg_depend as (\nselect\n  classid\n, objid\n, objsubid\n, refclassid\n, refobjid\n, refobjsubid\n, deptype\nfrom pg_catalog.pg_depend\n),  __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n) select distinct\n  srcobj.oid as source_oid\n  , srcnsp.nspname as source_schemaname\n  , srcobj.relname as source_objectname\n  , tgtobj.oid as dependent_oid\n  , tgtnsp.nspname as dependent_schemaname\n  , tgtobj.relname as dependent_objectname\n\nfrom\n\n  __dbt__cte__pg_class as srcobj\n  join __dbt__cte__pg_depend as srcdep on srcobj.oid = srcdep.refobjid\n  join __dbt__cte__pg_depend as tgtdep on srcdep.objid = tgtdep.objid\n  join __dbt__cte__pg_class as tgtobj\n    on tgtdep.refobjid = tgtobj.oid\n    and srcobj.oid <> tgtobj.oid\n  left join __dbt__cte__pg_namespace as srcnsp\n    on srcobj.relnamespace = srcnsp.oid\n  left join __dbt__cte__pg_namespace tgtnsp on tgtobj.relnamespace = tgtnsp.oid\n\nwhere\n  tgtdep.deptype = 'i' --dependency_internal\n  and tgtobj.relkind = 'v' --i=index, v=view, s=sequence", "relation_name": "\"nexabrands_datawarehouse\".\"nexabrands_external\".\"redshift_admin_dependencies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.482727Z", "completed_at": "2025-04-09T16:48:42.514316Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.515225Z", "completed_at": "2025-04-09T16:48:42.515239Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03588128089904785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.redshift.redshift_admin_users_schema_privileges", "compiled": true, "compiled_code": "with  __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n),  __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n), tables as (\n\n  select * from __dbt__cte__pg_tables\n\n), views as (\n\n  select * from __dbt__cte__pg_views\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n  \n), schemas as (\n  \n  select\n  distinct(schema_name)\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n        \n  union\n        \n  select\n  distinct(schema_name)\n  from views\n        \n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\n\nselect \n  schemas.schema_name\n, users.username\n, has_schema_privilege(users.username, schemas.schema_name, 'usage') AS has_usage_privilege\n, has_schema_privilege(users.username, schemas.schema_name, 'create') AS has_create_privilege\nfrom schemas\ncross join users\norder by schemas.schema_name, users.username", "relation_name": "\"nexabrands_datawarehouse\".\"nexabrands_external\".\"redshift_admin_users_schema_privileges\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.528416Z", "completed_at": "2025-04-09T16:48:42.565753Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.567287Z", "completed_at": "2025-04-09T16:48:42.567308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04862523078918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.redshift.redshift_admin_users_table_view_privileges", "compiled": true, "compiled_code": "with  __dbt__cte__pg_tables as (\nselect\n  schemaname as schema_name\n, tablename as table_name\n, tableowner as table_owner\n, tablespace as table_space\n, hasindexes as has_indexes\n, hasrules as has_rules\n, hastriggers as has_triggers\nfrom pg_catalog.pg_tables\n),  __dbt__cte__pg_views as (\nselect\n  schemaname as schema_name\n, viewname as view_name\n, viewowner as view_owner\nfrom pg_catalog.pg_views\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n), tables as (\n\n  select * from __dbt__cte__pg_tables\n\n), views as (\n\n  select * from __dbt__cte__pg_views\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n\n), objects as (\n  \n  select\n    schema_name\n  , 'table' as object_type\n  , table_name as object_name\n  , '\"' || schema_name || '\".\"' || table_name || '\"' as full_object_name\n  from tables\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n  union\n  \n  select\n    schema_name\n  , 'view' as object_type\n  , view_name as object_name\n  , '\"' || schema_name || '\".\"' || view_name || '\"' as full_object_name\n  from views\n  where schema_name not in ('pg_catalog', 'information_schema')\n  \n)\n\nselect \n  objects.schema_name\n, objects.object_name\n, users.username\n, has_table_privilege(users.username, objects.full_object_name, 'select') as has_select_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'insert') as has_insert_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'update') as has_update_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'delete') as has_delete_privilege\n, has_table_privilege(users.username, objects.full_object_name, 'references') as has_references_privilege\nfrom objects\ncross join users\norder by objects.full_object_name, users.username", "relation_name": "\"nexabrands_datawarehouse\".\"nexabrands_external\".\"redshift_admin_users_table_view_privileges\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.620484Z", "completed_at": "2025-04-09T16:48:42.694179Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.695268Z", "completed_at": "2025-04-09T16:48:42.695286Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08117246627807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.redshift.redshift_admin_table_stats", "compiled": true, "compiled_code": "with  __dbt__cte__stv_tbl_perm as (\nselect\n  slice\n, id -- table id\n, name -- table name\n, rows\n, sorted_rows\n, (rows - sorted_rows) as unsorted_rows\n, temp\n, db_id\n, backup\nfrom pg_catalog.stv_tbl_perm\n),  __dbt__cte__pg_class as (\nselect\n  oid\n, relname\n, relnamespace\n, reltype\n, relowner\n, relam\n, relfilenode\n, reltablespace\n, relpages\n, reltuples\n, reltoastrelid\n, reltoastidxid\n, relhasindex\n, relisshared\n, relkind\n, relnatts\n, relexternid\n, relisreplicated\n, relispinned\n, reldiststyle\n, relprojbaseid\n, relchecks\n, reltriggers\n, relukeys\n, relfkeys\n, relrefs\n, relhasoids\n, relhaspkey\n, relhasrules\n, relhassubclass\n, relacl\nfrom pg_catalog.pg_class\n),  __dbt__cte__pg_namespace as (\nselect\n  oid\n, nspname\n, nspowner\n, nspacl\nfrom pg_catalog.pg_namespace\n),  __dbt__cte__stv_blocklist as (\nselect\n  slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.stv_blocklist\n),  __dbt__cte__pg_attribute as (\nselect\n  attrelid\n, attname\n, atttypid\n, attstattarget\n, attlen\n, attnum\n, attndims\n, attcacheoff\n, atttypmod\n, attbyval\n, attstorage\n, attalign\n, attnotnull\n, atthasdef\n, attisdropped\n, attislocal\n, attinhcount\n, attisdistkey\n, attispreloaded\n, attsortkeyord\n, attencodingtype\n, attencrypttype\n, (case attisdistkey\n        when 't' then attname\n        else null end) as dist_key\n, (case attsortkeyord\n        when 1 then attname\n        else null end) as sort_key\nfrom pg_catalog.pg_attribute\n),  __dbt__cte__svv_diskusage as (\nselect\n  db_id\n, name\n, slice\n, col\n, tbl\n, blocknum\n, num_values\n, extended_limits\n, minvalue\n, maxvalue\n, sb_pos\n, pinned\n, on_disk\n, backed_up\n, modified\n, hdr_modified\n, unsorted\n, tombstone\n, preferred_diskno\n, temporary\n, newblock\n, num_readers\n, id\n, flags\nfrom pg_catalog.svv_diskusage\n),  __dbt__cte__stv_partitions as (\nselect\n\n  owner\n, host\n, diskno\n, part_begin\n, part_end\n, used\n, tossed\n, capacity\n, \"reads\"\n, writes\n, seek_forward\n, seek_back\n, is_san\n, failed\n, mbps\n, mount\n\nfrom pg_catalog.stv_partitions\n), unsorted_by_table as (\n\n  select\n    db_id\n  , id as table_id\n  , name as table_name\n  , sum(rows) as rows\n  , sum(unsorted_rows) as unsorted_rows\n  from __dbt__cte__stv_tbl_perm\n  group by 1, 2, 3\n\n), pg_class as (\n\n  select * from __dbt__cte__pg_class\n\n), pg_namespace as (\n\n  select * from __dbt__cte__pg_namespace\n\n), table_sizes as (\n\n  select\n    tbl as table_id\n  , count(*) as size_in_megabytes\n  from __dbt__cte__stv_blocklist\n  group by 1\n\n), table_attributes as (\n\n  select\n    attrelid as table_id\n  , min(dist_key) as dist_key\n  , min(sort_key) as sort_key\n  , max(attsortkeyord) as num_sort_keys\n  , (max(attencodingtype) > 0) as is_encoded\n  , max(attnum) as num_columns\n  from __dbt__cte__pg_attribute\n  group by 1\n\n), slice_distribution as (\n\n  select\n    tbl as table_id\n  , trim(name) as name\n  , slice\n  , count(*) as size_in_megabytes\n\n  from __dbt__cte__svv_diskusage\n  group by 1, 2, 3\n\n), capacity as (\n\n  select\n    sum(capacity) as total_megabytes\n  from __dbt__cte__stv_partitions\n  where part_begin=0\n\n), table_distribution_ratio as (\n\n  select\n    table_id\n  , (max(size_in_megabytes)::float / min(size_in_megabytes)::float)\n      as ratio\n  from slice_distribution\n  group by 1\n\n)\n\nselect\n\n  trim(pg_namespace.nspname) as schema\n, trim(unsorted_by_table.table_name) as table\n, unsorted_by_table.rows\n, unsorted_by_table.unsorted_rows\n, (case unsorted_by_table.rows\n        when 0 then 0\n        else (unsorted_by_table.unsorted_rows::float / unsorted_by_table.rows::float) * 100.0 end)\n    as percent_rows_unsorted\n, unsorted_by_table.table_id\n\n, decode(pg_class.reldiststyle, 0, 'even',\n                              1, table_attributes.dist_key,\n                              'all') as dist_style\n, table_distribution_ratio.ratio as dist_skew\n\n, (table_attributes.sort_key is not null) as is_sorted\n, table_attributes.sort_key\n, table_attributes.num_sort_keys\n, table_attributes.num_columns\n\n, table_sizes.size_in_megabytes\n, (case capacity.total_megabytes\n        when 0 then 0\n        else (table_sizes.size_in_megabytes::float / capacity.total_megabytes::float) * 100.0 end)\n    as disk_used_percent_of_total\n, table_attributes.is_encoded\n\nfrom unsorted_by_table\n\nleft join pg_class\n  on pg_class.oid = unsorted_by_table.table_id\n\nleft join pg_namespace\n  on pg_namespace.oid = pg_class.relnamespace\n\nleft join capacity\n  on 1=1\n\nleft join table_sizes\n  on unsorted_by_table.table_id = table_sizes.table_id\n\nleft join table_attributes\n  on table_attributes.table_id = unsorted_by_table.table_id\n\nleft join table_distribution_ratio\n  on table_distribution_ratio.table_id = unsorted_by_table.table_id", "relation_name": "\"nexabrands_datawarehouse\".\"nexabrands_external\".\"redshift_admin_table_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.703794Z", "completed_at": "2025-04-09T16:48:42.718273Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.719240Z", "completed_at": "2025-04-09T16:48:42.719252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017854928970336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.anomaly_threshold_sensitivity", "compiled": true, "compiled_code": "\n\nwith metrics_anomaly_score as (\n\n    select * from \"nexabrands_datawarehouse\".\"elementary\".\"metrics_anomaly_score\"\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as \"is_anomaly_1_5\",\n        case when abs(anomaly_score) >= 2 then true else false end as \"is_anomaly_2\",\n        case when abs(anomaly_score) >= 2.5 then true else false end as \"is_anomaly_2_5\",\n        case when abs(anomaly_score) >= 3 then true else false end as \"is_anomaly_3\",\n        case when abs(anomaly_score) >= 3.5 then true else false end as \"is_anomaly_3_5\",\n        case when abs(anomaly_score) >= 4 then true else false end as \"is_anomaly_4\",\n        case when abs(anomaly_score) >= 4.5 then true else false end as \"is_anomaly_4_5\"\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"anomaly_threshold_sensitivity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.723313Z", "completed_at": "2025-04-09T16:48:42.739416Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.740185Z", "completed_at": "2025-04-09T16:48:42.740198Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01880049705505371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.elementary.alerts_dbt_models", "compiled": true, "compiled_code": "\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from \"nexabrands_datawarehouse\".\"elementary\".\"model_run_results\"\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from \"nexabrands_datawarehouse\".\"elementary\".\"snapshot_run_results\"\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       cast(generated_at as timestamp) as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere True and lower(status) != 'success'and lower(status) != 'skipped'", "relation_name": "\"nexabrands_datawarehouse\".\"elementary\".\"alerts_dbt_models\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.746028Z", "completed_at": "2025-04-09T16:48:42.757968Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.758660Z", "completed_at": "2025-04-09T16:48:42.758673Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014362573623657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.accepted_values_fact_order_line_performance_line_fill_rate__0__1.c7274f490e", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        line_fill_rate as value_field,\n        count(*) as n_records\n\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\n    group by line_fill_rate\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.762248Z", "completed_at": "2025-04-09T16:48:42.774801Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.775493Z", "completed_at": "2025-04-09T16:48:42.775506Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014867067337036133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_fact_order_line_performance_delivery_qty__100__0.b84c8217b8", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and delivery_qty >= 0 and delivery_qty <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.778909Z", "completed_at": "2025-04-09T16:48:42.787563Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.788206Z", "completed_at": "2025-04-09T16:48:42.788218Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01078486442565918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_fact_order_line_performance_order_qty__100__0.1a4c3cde49", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_qty >= 0 and order_qty <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.791328Z", "completed_at": "2025-04-09T16:48:42.799518Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:42.800231Z", "completed_at": "2025-04-09T16:48:42.800244Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01028585433959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_fact_order_line_performance_volume_fill_rate__1__0.af2f2a8189", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and volume_fill_rate >= 0 and volume_fill_rate <= 1\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:42.803466Z", "completed_at": "2025-04-09T16:48:43.107466Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:43.108632Z", "completed_at": "2025-04-09T16:48:43.108654Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3141627311706543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_of_type_fact_order_line_performance_actual_delivery_date__date.96ca96aadb", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_LINE_ID' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_ID' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRODUCT_ID' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_QTY' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELIVERY_QTY' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AGREED_DELIVERY_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTUAL_DELIVERY_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOLUME_FILL_RATE' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LINE_FILL_RATE' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTUAL_DELIVERY_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:43.123355Z", "completed_at": "2025-04-09T16:48:43.517822Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:43.518927Z", "completed_at": "2025-04-09T16:48:43.518944Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.40503454208374023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_of_type_fact_order_line_performance_agreed_delivery_date__date.3e04053687", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ORDER_LINE_ID' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_ID' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRODUCT_ID' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORDER_QTY' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELIVERY_QTY' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AGREED_DELIVERY_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTUAL_DELIVERY_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOLUME_FILL_RATE' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LINE_FILL_RATE' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AGREED_DELIVERY_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:43.531349Z", "completed_at": "2025-04-09T16:48:43.947455Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:43.952892Z", "completed_at": "2025-04-09T16:48:43.952913Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4424479007720947, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_fact_order_line_performance_order_line_id__order_id__product_id__order_qty__delivery_qty__agreed_delivery_date__actual_delivery_date__volume_fill_rate__line_fill_rate.0fc81e3abe", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select cast('ORDER_LINE_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('ORDER_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('PRODUCT_ID' as TEXT) as relation_column\n        union all\n        \n        select cast('ORDER_QTY' as TEXT) as relation_column\n        union all\n        \n        select cast('DELIVERY_QTY' as TEXT) as relation_column\n        union all\n        \n        select cast('AGREED_DELIVERY_DATE' as TEXT) as relation_column\n        union all\n        \n        select cast('ACTUAL_DELIVERY_DATE' as TEXT) as relation_column\n        union all\n        \n        select cast('VOLUME_FILL_RATE' as TEXT) as relation_column\n        union all\n        \n        select cast('LINE_FILL_RATE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('ORDER_LINE_ID' as TEXT) as input_column\n        union all\n        \n        select cast('ORDER_ID' as TEXT) as input_column\n        union all\n        \n        select cast('PRODUCT_ID' as TEXT) as input_column\n        union all\n        \n        select cast('ORDER_QTY' as TEXT) as input_column\n        union all\n        \n        select cast('DELIVERY_QTY' as TEXT) as input_column\n        union all\n        \n        select cast('AGREED_DELIVERY_DATE' as TEXT) as input_column\n        union all\n        \n        select cast('ACTUAL_DELIVERY_DATE' as TEXT) as input_column\n        union all\n        \n        select cast('VOLUME_FILL_RATE' as TEXT) as input_column\n        union all\n        \n        select cast('LINE_FILL_RATE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:43.985138Z", "completed_at": "2025-04-09T16:48:44.053319Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.054625Z", "completed_at": "2025-04-09T16:48:44.054645Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07648158073425293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_fact_order_line_performance_4000__1.a7d72c08d3", "compiled": true, "compiled_code": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 4000\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.079346Z", "completed_at": "2025-04-09T16:48:44.115573Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.116780Z", "completed_at": "2025-04-09T16:48:44.116799Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04043889045715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_line_performance_agreed_delivery_date.fd68b8fc8b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect agreed_delivery_date\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\nwhere agreed_delivery_date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.124267Z", "completed_at": "2025-04-09T16:48:44.138298Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.139735Z", "completed_at": "2025-04-09T16:48:44.139753Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019196510314941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_line_performance_delivery_qty.f98967985a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect delivery_qty\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\nwhere delivery_qty is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.150405Z", "completed_at": "2025-04-09T16:48:44.166788Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.167914Z", "completed_at": "2025-04-09T16:48:44.167936Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020314693450927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_line_performance_line_fill_rate.44e0a7fe2a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect line_fill_rate\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\nwhere line_fill_rate is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.174417Z", "completed_at": "2025-04-09T16:48:44.191430Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.192469Z", "completed_at": "2025-04-09T16:48:44.192487Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020323514938354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_line_performance_order_id.a01af18c4f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.197303Z", "completed_at": "2025-04-09T16:48:44.209522Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.210573Z", "completed_at": "2025-04-09T16:48:44.210591Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01539754867553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_line_performance_order_line_id.15557203cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_line_id\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\nwhere order_line_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.215300Z", "completed_at": "2025-04-09T16:48:44.227054Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.228236Z", "completed_at": "2025-04-09T16:48:44.228254Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015125751495361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_line_performance_order_qty.440904245e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_qty\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\nwhere order_qty is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.233176Z", "completed_at": "2025-04-09T16:48:44.245839Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.246841Z", "completed_at": "2025-04-09T16:48:44.246858Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015909433364868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_line_performance_product_id.d5be171537", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.251571Z", "completed_at": "2025-04-09T16:48:44.265694Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.266722Z", "completed_at": "2025-04-09T16:48:44.266740Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017271041870117188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.relationships_fact_order_line_performance_order_id__order_id__ref_stg_orders_.dbb273c950", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select order_id as from_field\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\n    where order_id is not null\n),\n\nparent as (\n    select order_id as to_field\n    from \"nexabrands_datawarehouse\".\"staging\".\"stg_orders\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.271531Z", "completed_at": "2025-04-09T16:48:44.286226Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.287467Z", "completed_at": "2025-04-09T16:48:44.287485Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01805734634399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.unique_fact_order_line_performance_order_line_id.88ae753bef", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_line_id as unique_field,\n    count(*) as n_records\n\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_line_performance\"\nwhere order_line_id is not null\ngroup by order_line_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.293925Z", "completed_at": "2025-04-09T16:48:44.307301Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.308552Z", "completed_at": "2025-04-09T16:48:44.308570Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0170290470123291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_fact_order_performance_percentage_in_full_percentage__100__0.afe7c0fa9b", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and in_full_percentage >= 0 and in_full_percentage <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_performance_percentage\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.314258Z", "completed_at": "2025-04-09T16:48:44.327294Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.328377Z", "completed_at": "2025-04-09T16:48:44.328394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0170443058013916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_fact_order_performance_percentage_on_time_percentage__100__0.ef6336f96a", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and on_time_percentage >= 0 and on_time_percentage <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_performance_percentage\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.332984Z", "completed_at": "2025-04-09T16:48:44.345646Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.346714Z", "completed_at": "2025-04-09T16:48:44.346732Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015984058380126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_column_values_to_be_between_fact_order_performance_percentage_otif_percentage__100__0.e6e79eb42d", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and otif_percentage >= 0 and otif_percentage <= 100\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_performance_percentage\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.351642Z", "completed_at": "2025-04-09T16:48:44.676223Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.677388Z", "completed_at": "2025-04-09T16:48:44.677408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3347203731536865, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_columns_to_match_set_fact_order_performance_percentage_on_time_percentage__in_full_percentage__otif_percentage.90d5fe651e", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select cast('ON_TIME_PERCENTAGE' as TEXT) as relation_column\n        union all\n        \n        select cast('IN_FULL_PERCENTAGE' as TEXT) as relation_column\n        union all\n        \n        select cast('OTIF_PERCENTAGE' as TEXT) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('ON_TIME_PERCENTAGE' as TEXT) as input_column\n        union all\n        \n        select cast('IN_FULL_PERCENTAGE' as TEXT) as input_column\n        union all\n        \n        select cast('OTIF_PERCENTAGE' as TEXT) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.690079Z", "completed_at": "2025-04-09T16:48:44.706589Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.707790Z", "completed_at": "2025-04-09T16:48:44.707811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020823001861572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.dbt_expectations_expect_table_row_count_to_be_between_fact_order_performance_percentage_1.b61fac51ac", "compiled": true, "compiled_code": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1\n)\n as expression\n\n\n    from \"nexabrands_datawarehouse\".\"marts\".\"fact_order_performance_percentage\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.713353Z", "completed_at": "2025-04-09T16:48:44.766993Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.772460Z", "completed_at": "2025-04-09T16:48:44.772481Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.061544179916381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_performance_percentage_in_full_percentage.84c6048268", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect in_full_percentage\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_performance_percentage\"\nwhere in_full_percentage is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.790097Z", "completed_at": "2025-04-09T16:48:44.813879Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.815931Z", "completed_at": "2025-04-09T16:48:44.815952Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03134417533874512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_performance_percentage_on_time_percentage.23074b0b5c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect on_time_percentage\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_performance_percentage\"\nwhere on_time_percentage is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.822279Z", "completed_at": "2025-04-09T16:48:44.837253Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.838561Z", "completed_at": "2025-04-09T16:48:44.838581Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019104719161987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.nexabrands_dbt.not_null_fact_order_performance_percentage_otif_percentage.68c9cd14b9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect otif_percentage\nfrom \"nexabrands_datawarehouse\".\"marts\".\"fact_order_performance_percentage\"\nwhere otif_percentage is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-09T16:48:44.846833Z", "completed_at": "2025-04-09T16:48:44.887725Z"}, {"name": "execute", "started_at": "2025-04-09T16:48:44.889023Z", "completed_at": "2025-04-09T16:48:44.889042Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04617571830749512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.redshift.redshift_admin_queries", "compiled": true, "compiled_code": "with  __dbt__cte__stl_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid as transaction_id\n, label\n, pid\n, database\n, starttime as started_at\n, endtime as finished_at\n, aborted\n\nfrom pg_catalog.stl_query\n),  __dbt__cte__pg_user as (\nselect\n\n  usesysid as user_id\n, usename as username\n\nfrom pg_catalog.pg_user\n),  __dbt__cte__stl_explain as (\nselect\n\n  userid as user_id\n, query as query_id\n, nodeid\n, parentid\n, plannode\n, info\n\nfrom pg_catalog.stl_explain\n),  __dbt__cte__redshift_cost as (\nwith stl_explain as (\n\n  select query_id, plannode from __dbt__cte__stl_explain\n  where nodeid = 1\n\n), parse_step_one as (\n\n  -- plannode (which contains cost) is formatted like:\n  --   XN Seq Scan on nyc_last_update  (cost=0.00..0.03 rows=2 width=40)\n  -- we want to rip out the cost part (0.00, 0.03) and make it usable.\n  -- cost_string after this step is \"0.00..0.03 ...\"\n  select\n    query_id\n  , split_part(plannode, 'cost=', 2) as cost_string\n\n  from stl_explain\n\n), parse_step_two as (\n\n  select\n    query_id\n  , split_part(cost_string, '..', 1) as starting_cost\n  , substring(\n      split_part(cost_string, '..', 2)\n      from 1\n      for strpos(split_part(cost_string, '..', 2), ' ')) as total_cost\n\n  from parse_step_one\n\n)\n\n\nselect\n\n  query_id\n, starting_cost::float as starting_cost\n, total_cost::float as total_cost\n\nfrom parse_step_two\n),  __dbt__cte__stl_wlm_query as (\nselect\n\n  userid as user_id\n, query as query_id\n, xid\n, task\n, service_class\n, slot_count\n, service_class_start_time\n, queue_start_time\n, queue_end_time\n, total_queue_time\n, exec_start_time\n, exec_end_time\n, total_exec_time\n, service_class_end_time\n, final_state\n\nfrom pg_catalog.stl_wlm_query\n), queries as (\n\n  select * from __dbt__cte__stl_query\n\n), users as (\n\n  select * from __dbt__cte__pg_user\n\n), cost as (\n\n  select * from __dbt__cte__redshift_cost\n\n), timings as (\n\n  select * from __dbt__cte__stl_wlm_query\n\n)\n\n\n\nselect\n\n  queries.query_id\n, queries.transaction_id\n, users.username::varchar\n\n, cost.starting_cost\n, cost.total_cost\n\n, queries.started_at\n, queries.finished_at\n\n, timings.queue_start_time\n, timings.queue_end_time\n, (timings.total_queue_time::float / 1000000.0) as total_queue_time_seconds\n\n, timings.exec_start_time\n, timings.exec_end_time\n, (timings.total_exec_time::float / 1000000.0) as total_exec_time_seconds\n\nfrom queries\n\nleft join users\n  on queries.user_id = users.user_id\n\nleft join cost\n  on queries.query_id = cost.query_id\n\nleft join timings\n  on queries.query_id = timings.query_id", "relation_name": "\"nexabrands_datawarehouse\".\"nexabrands_external\".\"redshift_admin_queries\""}], "elapsed_time": 9.743934154510498, "args": {"populate_cache": true, "log_format_file": "debug", "introspect": true, "send_anonymous_usage_stats": true, "indirect_selection": "eager", "log_level_file": "debug", "which": "generate", "source_freshness_run_project_hooks": false, "print": true, "static_parser": true, "show_resource_report": false, "log_level": "info", "project_dir": "/tmp/tmp_qkko0cy", "log_file_max_bytes": 10485760, "require_resource_names_without_spaces": false, "static": false, "use_colors": true, "use_colors_file": true, "invocation_command": "dbt docs generate --project-dir /tmp/tmp_qkko0cy --profiles-dir /tmp/cosmos/profile/913deba9ea6ea08b600cb8b8477fe5b2fb66a6101cb2db72241c0f00f8c68f82 --profile default --target dev", "log_format": "default", "warn_error_options": {"include": [], "exclude": []}, "vars": {}, "quiet": false, "exclude": [], "require_explicit_package_overrides_for_builtin_materializations": false, "defer": false, "printer_width": 80, "log_path": "/tmp/tmp_qkko0cy/logs", "write_json": true, "version_check": true, "select": [], "profile": "default", "cache_selected_only": false, "strict_mode": false, "target": "dev", "empty_catalog": false, "favor_state": false, "enable_legacy_logger": false, "partial_parse_file_diff": true, "macro_debugging": false, "profiles_dir": "/tmp/cosmos/profile/913deba9ea6ea08b600cb8b8477fe5b2fb66a6101cb2db72241c0f00f8c68f82", "compile": true, "partial_parse": true}}